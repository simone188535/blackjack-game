{"ast":null,"code":"var _jsxFileName = \"/Users/simoneanthony/Desktop/personal-projects/blackjack-takehome/src/components/GameArena.tsx\",\n  _s = $RefreshSig$();\n// import axios from \"axios\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { fetchNewDeck, drawCards } from \"../API/getRequests\";\nimport MapCards from \"./MapCards\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameArena() {\n  _s();\n  const [playerTurn, setPlayerTurn] = useState(false);\n  const [deckId, setDeckId] = useState(null);\n  const [playersCards, setPlayersCards] = useState([]);\n  const [totalPlayerInfo, setTotalPlayerInfo] = useState({\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0\n  });\n  const [computersCards, setComputersCards] = useState([]);\n  const [totalComputerInfo, setTotalComputerInfo] = useState({\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0\n  });\n  const [didPlayerWin, setDidPlayerWin] = useState(null);\n  const drawCard = useCallback(() => {\n    if (deckId && playerTurn) {\n      // else it is players turn to pick a card\n      (async () => {\n        const {\n          data: {\n            cards\n          }\n        } = await drawCards(deckId);\n        // add card to playersCards\n        setPlayersCards(prevState => [...prevState, ...cards]);\n        // the player is done drawing a card\n        // setPlayerTurn(false);\n      })();\n    }\n  }, [deckId, playerTurn]);\n  useEffect(() => {\n    (async () => {\n      // create a deck\n      const {\n        data: {\n          deck_id\n        }\n      } = await fetchNewDeck();\n\n      // save the deck_id to state\n      setDeckId(deck_id);\n    })();\n  }, []);\n  useEffect(() => {\n    if (!deckId) return;\n\n    // initial cards for computer and player\n    (async () => {\n      // computer draws cards\n      const {\n        data: {\n          cards: computersCards\n        }\n      } = await drawCards(deckId, 2);\n      setComputersCards(computersCards);\n\n      // player draws cards\n      const {\n        data: {\n          cards: playerCards\n        }\n      } = await drawCards(deckId, 2);\n      setPlayersCards(playerCards);\n\n      // change turns\n      setPlayerTurn(true);\n    })();\n  }, [deckId]);\n\n  // const calcCardTotal = (totalInfoObj: ITotalInfo, arr: ICard[]) => {\n  //   // start array at lastReadCardIndex\n  //   let currIndex = totalInfoObj.lastReadCardIndex;\n  //   console.log(currIndex);\n  //   const acePosition: Number[] = [];\n\n  //   const arrFromStartingPoint = arr.slice(currIndex);\n  //   let currTotal = totalInfoObj.total;\n\n  //   arrFromStartingPoint.forEach(({ value }) => {\n  //     // if the value is a number, simply add it to currTotal\n  //      if (value === \"QUEEN\" || value ===\"KING\" || value === \"JACK\") {\n  //       console.log('Face');\n  //       // if the value is a face card add 10\n  //       currTotal += 10;\n  //     } else if (value === \"ACE\" ) {\n  //       console.log('Ace');\n  //       // if the value is an ace, by default is equal to 11\n  //       currTotal += 11;\n  //       acePosition.push(currIndex);\n  //     } else {\n  //       const NumericVal = Number(value);\n  //       currTotal += NumericVal;\n  //     }\n  //     currIndex += 1;\n  //   });\n\n  //   return { currTotal, acePosition, currIndex };\n\n  //   // // update state for the provided obj\n\n  //   // setStateToChange((prevState) => ({\n  //   //   ...prevState,\n  //   //   total: currTotal,\n  //   //   acePositions: [...prevState.acePositions, ...acePosition],\n  //   //   lastReadCardIndex: currIndex,\n  //   // }));\n  // };\n\n  // to memoize, pass in the obj key instead\n\n  const calcCardTotal = useCallback((identifierStr, cardsArr, setStateFunc) => {\n    const currObj = identifierStr === \"player\" ? totalPlayerInfo : totalComputerInfo;\n\n    // start array at lastReadCardIndex\n    let currIndex = currObj.lastReadCardIndex;\n    const arrFromStartingPoint = cardsArr.slice(currIndex);\n    const acePositionArr = [];\n    let total = currObj.total;\n    arrFromStartingPoint.forEach((_ref, index) => {\n      let {\n        value\n      } = _ref;\n      // if the value is a number, simply add it to currTotal\n      if (value === \"QUEEN\" || value === \"KING\" || value === \"JACK\") {\n        // if the value is a face card add 10\n        total += 10;\n      } else if (value === \"ACE\") {\n        // if the value is an ace, by default is equal to 11\n        total += 11;\n        // acePosition.push(currIndex);\n        acePositionArr.push(index);\n      } else {\n        const NumericVal = Number(value);\n        total += NumericVal;\n      }\n      currIndex += 1;\n    });\n    setStateFunc(prevState => ({\n      ...prevState,\n      total,\n      acePositions: [...acePositionArr]\n    }));\n  }, []);\n  useEffect(() => {\n    // if playersCards were added recalculate the total\n    if (playersCards.length > 0) {\n      calcCardTotal(\"player\", playersCards, setTotalPlayerInfo);\n    }\n  }, [calcCardTotal, playersCards]);\n  useEffect(() => {\n    // if computersCards were added recalculate the total\n    if (computersCards.length > 0) {\n      calcCardTotal(\"computer\", computersCards, setTotalComputerInfo);\n    }\n  }, [calcCardTotal, computersCards]);\n\n  // useEffect(() => {\n  //   // if cards were added recalculate the total\n\n  //   // if the most current playersCards was not read, recalculate the total\n  //   // if (playersCards.length !== totalPlayerInfo.lastReadCardIndex) {\n  //     const {\n  //       currTotal: currTotalPlayer,\n  //       acePosition: acePositionPlayer,\n  //       currIndex: currIndexPlayer,\n  //     } = calcCardTotal(totalPlayerInfo, playersCards);\n\n  //     // // update state for the provided obj\n\n  // setTotalPlayerInfo((prevState) => ({\n  //   ...prevState,\n  //   total: currTotalPlayer,\n  //   acePositions: [...prevState.acePositions, ...acePositionPlayer],\n  //   lastReadCardIndex: currIndexPlayer,\n  // }));\n  //   // }\n\n  //   // if the most current card was not read, recalculate the total\n  //   // if (computersCards.length !== totalComputerInfo.lastReadCardIndex) {\n  //   //   const {} = calcCardTotal(totalComputerInfo, computersCards);\n\n  //     // // update state for the provided obj\n\n  //     // setTotalComputerInfo((prevState) => ({\n  //     //   ...prevState,\n  //     //   total: currTotal,\n  //     //   acePositions: [...prevState.acePositions, ...acePosition],\n  //     //   lastReadCardIndex: currIndex,\n  //     // }));\n  //   // }\n  // }, [playersCards, totalPlayerInfo]);\n\n  useEffect(() => {\n    console.log(\"playersCards\", playersCards);\n  }, [playersCards]);\n  useEffect(() => {\n    console.log(\"totalPlayerInfo\", totalPlayerInfo);\n  }, [totalPlayerInfo]);\n\n  // useEffect(() => {\n  //   console.log(\"playersCards\", playersCards);\n  //   console.log(\"computersCards\", computersCards);\n  // }, [computersCards, playersCards]);\n\n  // useEffect(() => {\n  //   console.log(\"totalPlayerInfo\", totalPlayerInfo);\n  //   console.log(\"totalComputerInfo\", totalComputerInfo);\n  // }, [totalComputerInfo, totalPlayerInfo]);\n\n  // const calcTotals = (currentUser: ITotalInfo, cards: ICard[]) => {\n\n  //   // calculate the current total using the last read card index\n\n  // }\n\n  // useEffect(() => {\n  //   // if the computer or the user have a number larger than 21, check if they have aces, if so subtract the 10 from the value and add 1\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-arena\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"game-panel panel-one\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Computer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapCards, {\n        cards: computersCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Total: \", totalComputerInfo.total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"game-panel panel-two\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapCards, {\n        cards: playersCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"btn-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => drawCard(),\n          children: \"Hit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          children: \"Stand\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Total: \", totalPlayerInfo.total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 5\n  }, this);\n}\n\n// by default aces can be given a value of 10\n_s(GameArena, \"MmW/twaAyhn5REL85q6VGPdraSg=\");\n_c = GameArena;\nexport default GameArena;\nvar _c;\n$RefreshReg$(_c, \"GameArena\");","map":{"version":3,"names":["useState","useEffect","useCallback","fetchNewDeck","drawCards","MapCards","GameArena","playerTurn","setPlayerTurn","deckId","setDeckId","playersCards","setPlayersCards","totalPlayerInfo","setTotalPlayerInfo","total","acePositions","lastReadCardIndex","computersCards","setComputersCards","totalComputerInfo","setTotalComputerInfo","didPlayerWin","setDidPlayerWin","drawCard","data","cards","prevState","deck_id","playerCards","calcCardTotal","identifierStr","cardsArr","setStateFunc","currObj","currIndex","arrFromStartingPoint","slice","acePositionArr","forEach","index","value","push","NumericVal","Number","length","console","log"],"sources":["/Users/simoneanthony/Desktop/personal-projects/blackjack-takehome/src/components/GameArena.tsx"],"sourcesContent":["// import axios from \"axios\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { fetchNewDeck, drawCards } from \"../API/getRequests\";\nimport MapCards from \"./MapCards\";\n\nexport interface ICard {\n  code: string;\n  image: string;\n  images: {\n    svg: string;\n    png: string;\n  };\n  value: string;\n  suit: string;\n}\n\ninterface ITotalInfo {\n  total: number;\n  acePositions: Number[];\n  lastReadCardIndex: number;\n}\n\nfunction GameArena() {\n  const [playerTurn, setPlayerTurn] = useState(false);\n  const [deckId, setDeckId] = useState<null | string>(null);\n\n  const [playersCards, setPlayersCards] = useState<ICard[]>([]);\n  const [totalPlayerInfo, setTotalPlayerInfo] = useState<ITotalInfo>({\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0,\n  });\n\n  const [computersCards, setComputersCards] = useState<ICard[]>([]);\n  const [totalComputerInfo, setTotalComputerInfo] = useState<ITotalInfo>({\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0,\n  });\n\n  const [didPlayerWin, setDidPlayerWin] = useState<null | boolean>(null);\n\n  const drawCard = useCallback(() => {\n    if (deckId && playerTurn) {\n      // else it is players turn to pick a card\n      (async () => {\n        const {\n          data: { cards },\n        } = await drawCards(deckId);\n        // add card to playersCards\n        setPlayersCards((prevState) => [...prevState, ...cards]);\n        // the player is done drawing a card\n        // setPlayerTurn(false);\n      })();\n    }\n  }, [deckId, playerTurn]);\n\n  useEffect(() => {\n    (async () => {\n      // create a deck\n      const {\n        data: { deck_id },\n      } = await fetchNewDeck();\n\n      // save the deck_id to state\n      setDeckId(deck_id);\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (!deckId) return;\n\n    // initial cards for computer and player\n    (async () => {\n      // computer draws cards\n      const {\n        data: { cards: computersCards },\n      } = await drawCards(deckId, 2);\n\n      setComputersCards(computersCards);\n\n      // player draws cards\n      const {\n        data: { cards: playerCards },\n      } = await drawCards(deckId, 2);\n\n      setPlayersCards(playerCards);\n\n      // change turns\n      setPlayerTurn(true);\n    })();\n  }, [deckId]);\n\n  // const calcCardTotal = (totalInfoObj: ITotalInfo, arr: ICard[]) => {\n  //   // start array at lastReadCardIndex\n  //   let currIndex = totalInfoObj.lastReadCardIndex;\n  //   console.log(currIndex);\n  //   const acePosition: Number[] = [];\n\n  //   const arrFromStartingPoint = arr.slice(currIndex);\n  //   let currTotal = totalInfoObj.total;\n\n  //   arrFromStartingPoint.forEach(({ value }) => {\n  //     // if the value is a number, simply add it to currTotal\n  //      if (value === \"QUEEN\" || value ===\"KING\" || value === \"JACK\") {\n  //       console.log('Face');\n  //       // if the value is a face card add 10\n  //       currTotal += 10;\n  //     } else if (value === \"ACE\" ) {\n  //       console.log('Ace');\n  //       // if the value is an ace, by default is equal to 11\n  //       currTotal += 11;\n  //       acePosition.push(currIndex);\n  //     } else {\n  //       const NumericVal = Number(value);\n  //       currTotal += NumericVal;\n  //     }\n  //     currIndex += 1;\n  //   });\n\n  //   return { currTotal, acePosition, currIndex };\n\n  //   // // update state for the provided obj\n\n  //   // setStateToChange((prevState) => ({\n  //   //   ...prevState,\n  //   //   total: currTotal,\n  //   //   acePositions: [...prevState.acePositions, ...acePosition],\n  //   //   lastReadCardIndex: currIndex,\n  //   // }));\n  // };\n\n  // to memoize, pass in the obj key instead\n\n  const calcCardTotal = useCallback((identifierStr: string, cardsArr: ICard[], setStateFunc: React.Dispatch<React.SetStateAction<ITotalInfo>>) => {\n    const currObj = identifierStr === \"player\" ? totalPlayerInfo: totalComputerInfo;\n\n    // start array at lastReadCardIndex\n    let currIndex = currObj.lastReadCardIndex;\n\n    const arrFromStartingPoint = cardsArr.slice(currIndex);\n    const acePositionArr: number[] = [];\n\n    let total = currObj.total;\n\n    arrFromStartingPoint.forEach(({ value }, index) => {\n        // if the value is a number, simply add it to currTotal\n         if (value === \"QUEEN\" || value ===\"KING\" || value === \"JACK\") {\n          // if the value is a face card add 10\n          total += 10;\n        } else if (value === \"ACE\" ) {\n          // if the value is an ace, by default is equal to 11\n          total += 11;\n          // acePosition.push(currIndex);\n          acePositionArr.push(index);\n        } else {\n          const NumericVal = Number(value);\n          total += NumericVal;\n        }\n        currIndex += 1;\n      });\n\n      setStateFunc((prevState) => ({\n        ...prevState,\n        total,\n        acePositions: [...acePositionArr]\n      }));\n  }, []);\n\n  useEffect(() => {\n    // if playersCards were added recalculate the total\n    if (playersCards.length > 0) {\n      calcCardTotal(\"player\", playersCards, setTotalPlayerInfo);\n    }\n  }, [calcCardTotal, playersCards]);\n\n  useEffect(() => {\n    // if computersCards were added recalculate the total\n    if (computersCards.length > 0) {\n      calcCardTotal(\"computer\", computersCards, setTotalComputerInfo);\n    }\n  }, [calcCardTotal, computersCards]);\n\n\n  // useEffect(() => {\n  //   // if cards were added recalculate the total\n\n  //   // if the most current playersCards was not read, recalculate the total\n  //   // if (playersCards.length !== totalPlayerInfo.lastReadCardIndex) {\n  //     const {\n  //       currTotal: currTotalPlayer,\n  //       acePosition: acePositionPlayer,\n  //       currIndex: currIndexPlayer,\n  //     } = calcCardTotal(totalPlayerInfo, playersCards);\n\n  //     // // update state for the provided obj\n\n      // setTotalPlayerInfo((prevState) => ({\n      //   ...prevState,\n      //   total: currTotalPlayer,\n      //   acePositions: [...prevState.acePositions, ...acePositionPlayer],\n      //   lastReadCardIndex: currIndexPlayer,\n      // }));\n  //   // }\n\n  //   // if the most current card was not read, recalculate the total\n  //   // if (computersCards.length !== totalComputerInfo.lastReadCardIndex) {\n  //   //   const {} = calcCardTotal(totalComputerInfo, computersCards);\n\n  //     // // update state for the provided obj\n\n  //     // setTotalComputerInfo((prevState) => ({\n  //     //   ...prevState,\n  //     //   total: currTotal,\n  //     //   acePositions: [...prevState.acePositions, ...acePosition],\n  //     //   lastReadCardIndex: currIndex,\n  //     // }));\n  //   // }\n  // }, [playersCards, totalPlayerInfo]);\n\n  useEffect(() => {\n    console.log(\"playersCards\", playersCards);\n  }, [playersCards]);\n\n    useEffect(() => {\n    console.log(\"totalPlayerInfo\", totalPlayerInfo);\n  }, [totalPlayerInfo]);\n\n  // useEffect(() => {\n  //   console.log(\"playersCards\", playersCards);\n  //   console.log(\"computersCards\", computersCards);\n  // }, [computersCards, playersCards]);\n\n  // useEffect(() => {\n  //   console.log(\"totalPlayerInfo\", totalPlayerInfo);\n  //   console.log(\"totalComputerInfo\", totalComputerInfo);\n  // }, [totalComputerInfo, totalPlayerInfo]);\n\n  // const calcTotals = (currentUser: ITotalInfo, cards: ICard[]) => {\n\n  //   // calculate the current total using the last read card index\n\n  // }\n\n  // useEffect(() => {\n  //   // if the computer or the user have a number larger than 21, check if they have aces, if so subtract the 10 from the value and add 1\n  // }, []);\n\n  return (\n    <div className=\"game-arena\">\n      <section className=\"game-panel panel-one\">\n        <h1>Computer</h1>\n        <MapCards cards={computersCards} />\n        <div>Total: {totalComputerInfo.total}</div>\n      </section>\n      <section className=\"game-panel panel-two\">\n        <div>User</div>\n        <MapCards cards={playersCards} />\n        <section className=\"btn-container\">\n          <button type=\"button\" onClick={() => drawCard()}>\n            Hit\n          </button>\n          <button type=\"button\">Stand</button>\n        </section>\n        <div>Total: {totalPlayerInfo.total}</div>\n      </section>\n    </div>\n  );\n}\n\n// by default aces can be given a value of 10\n\nexport default GameArena;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}