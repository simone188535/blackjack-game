{"ast":null,"code":"var _jsxFileName = \"/Users/simoneanthony/Desktop/personal-projects/blackjack-takehome/src/components/GameArena.tsx\",\n  _s = $RefreshSig$();\n// import axios from \"axios\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { fetchNewDeck, drawCards } from \"../API/getRequests\";\nimport MapCards from \"./MapCards\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameArena() {\n  _s();\n  const [playerTurn, setPlayerTurn] = useState(false);\n  const [deckId, setDeckId] = useState(null);\n  const [playersCards, setPlayersCards] = useState([]);\n  const [totalPlayerInfo, setTotalPlayerInfo] = useState({\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0\n  });\n  const [computersCards, setComputersCards] = useState([]);\n  const [totalComputerInfo, setTotalComputerInfo] = useState({\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0\n  });\n  const [didPlayerWin, setDidPlayerWin] = useState(null);\n  const [didPlayerStand, setDidPlayerStand] = useState(false);\n  const drawCard = useCallback(() => {\n    if (deckId && playerTurn) {\n      // else it is players turn to pick a card\n      (async () => {\n        const {\n          data: {\n            cards\n          }\n        } = await drawCards(deckId);\n        // add card to playersCards\n        setPlayersCards(prevState => [...prevState, ...cards]);\n        // the player is done drawing a card\n        // setPlayerTurn(false);\n      })();\n    }\n  }, [deckId, playerTurn]);\n  useEffect(() => {\n    (async () => {\n      // create a deck\n      const {\n        data: {\n          deck_id\n        }\n      } = await fetchNewDeck();\n\n      // save the deck_id to state\n      setDeckId(deck_id);\n    })();\n  }, []);\n  useEffect(() => {\n    if (!deckId) return;\n\n    // initial cards for computer and player\n    (async () => {\n      // computer draws cards\n      const {\n        data: {\n          cards: computersCards\n        }\n      } = await drawCards(deckId, 2);\n      setComputersCards(computersCards);\n\n      // player draws cards\n      const {\n        data: {\n          cards: playerCards\n        }\n      } = await drawCards(deckId, 2);\n      setPlayersCards(playerCards);\n\n      // change turns\n      setPlayerTurn(true);\n    })();\n  }, [deckId]);\n\n  // to memoize, pass in the obj key instead\n\n  const calcCardTotal = useCallback((cardsArr, setStateFunc) => {\n    let total = 0;\n    const acePositionArr = [];\n    cardsArr.forEach((_ref, index) => {\n      let {\n        value\n      } = _ref;\n      // if the value is a number, simply add it to currTotal\n      if (value === \"QUEEN\" || value === \"KING\" || value === \"JACK\") {\n        // if the value is a face card add 10\n        total += 10;\n      } else if (value === \"ACE\") {\n        // if the value is an ace, by default is equal to 11\n        total += 11;\n        // acePosition.push(currIndex);\n        acePositionArr.push(index);\n      } else {\n        const NumericVal = Number(value);\n        total += NumericVal;\n      }\n    });\n    setStateFunc(prevState => ({\n      ...prevState,\n      total,\n      acePositions: [...acePositionArr]\n    }));\n  }, []);\n  useEffect(() => {\n    // if playersCards were added recalculate the total\n    if (playersCards.length > 0) {\n      calcCardTotal(playersCards, setTotalPlayerInfo);\n    }\n  }, [calcCardTotal, playersCards]);\n  useEffect(() => {\n    // if computersCards were added recalculate the total\n    if (computersCards.length > 0) {\n      calcCardTotal(computersCards, setTotalComputerInfo);\n    }\n  }, [calcCardTotal, computersCards]);\n\n  // check if a winner is present\n  useEffect(() => {\n    // if the player has a total of 21, the game is over and they win\n    if (totalPlayerInfo.total === 21) {\n      setDidPlayerWin(true);\n    } else if (totalComputerInfo.total === 21) {\n      // if the computer has a total of 21, the game is over and it wins\n      setDidPlayerWin(false);\n    } else if (totalPlayerInfo.total > 21) {\n      // if the user has a score of over 21, check to see if they have aces\n      if (totalPlayerInfo.acePositions.length > 0) {\n        // if there are aces, subtract 11 points from the user and add 1, pop an ace from the acePositions \n        setTotalPlayerInfo(prevState => ({\n          ...prevState,\n          total: prevState.total - 11 + 1,\n          acePositions: prevState.acePositions.slice(0, -1)\n        }));\n      } else {\n        // if not the user automatically loses\n        setDidPlayerWin(false);\n      }\n    } else if (totalComputerInfo.total > 21) {\n      // if the Computer has a score of over 21 (2 aces), check to see if they have aces\n      if (totalComputerInfo.acePositions.length > 0) {\n        // if there are aces, subtract 11 points from the user and add 1, pop an ace from the acePositions \n        setTotalComputerInfo(prevState => ({\n          ...prevState,\n          total: prevState.total - 11 + 1,\n          acePositions: prevState.acePositions.slice(0, -1)\n        }));\n      } else {\n        // if not the computer automatically loses\n        setDidPlayerWin(true);\n      }\n    } else if (didPlayerStand) {\n      // if the player did stand and there is a tie OR the users cards total less than the computers cards, the computer wins\n      if (totalPlayerInfo.total === totalComputerInfo.total || totalPlayerInfo.total < totalComputerInfo.total) {\n        setDidPlayerWin(false);\n      }\n\n      // if the player has more points than the computer, the pplayer wins\n      if (totalPlayerInfo.total > totalComputerInfo.total) {\n        setDidPlayerWin(true);\n      } else {\n        // if the player and computer tie or the player has few points than the computer, the player loses\n        setDidPlayerWin(false);\n      }\n    }\n  }, [didPlayerStand, totalComputerInfo.acePositions.length, totalComputerInfo.total, totalPlayerInfo.acePositions.length, totalPlayerInfo.total]);\n  useEffect(() => {\n    console.log(didPlayerWin);\n  }, [didPlayerWin]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-arena\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"game-panel panel-one\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Computer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapCards, {\n        cards: computersCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Total: \", totalComputerInfo.total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"game-panel panel-two\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapCards, {\n        cards: playersCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"btn-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => drawCard(),\n          disabled: didPlayerStand || didPlayerWin !== null,\n          children: \"Hit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => setDidPlayerStand(true),\n          children: \"Stand\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Total: \", totalPlayerInfo.total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n}\n\n// by default aces can be given a value of 10\n_s(GameArena, \"OHkhIdBZAfiyvckqfXmaVz35N5A=\");\n_c = GameArena;\nexport default GameArena;\nvar _c;\n$RefreshReg$(_c, \"GameArena\");","map":{"version":3,"names":["useState","useEffect","useCallback","fetchNewDeck","drawCards","MapCards","GameArena","playerTurn","setPlayerTurn","deckId","setDeckId","playersCards","setPlayersCards","totalPlayerInfo","setTotalPlayerInfo","total","acePositions","lastReadCardIndex","computersCards","setComputersCards","totalComputerInfo","setTotalComputerInfo","didPlayerWin","setDidPlayerWin","didPlayerStand","setDidPlayerStand","drawCard","data","cards","prevState","deck_id","playerCards","calcCardTotal","cardsArr","setStateFunc","acePositionArr","forEach","index","value","push","NumericVal","Number","length","slice","console","log"],"sources":["/Users/simoneanthony/Desktop/personal-projects/blackjack-takehome/src/components/GameArena.tsx"],"sourcesContent":["// import axios from \"axios\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { fetchNewDeck, drawCards } from \"../API/getRequests\";\nimport MapCards from \"./MapCards\";\n\nexport interface ICard {\n  code: string;\n  image: string;\n  images: {\n    svg: string;\n    png: string;\n  };\n  value: string;\n  suit: string;\n}\n\ninterface ITotalInfo {\n  total: number;\n  acePositions: Number[];\n  lastReadCardIndex: number;\n}\n\nfunction GameArena() {\n  const [playerTurn, setPlayerTurn] = useState(false);\n  const [deckId, setDeckId] = useState<null | string>(null);\n\n  const [playersCards, setPlayersCards] = useState<ICard[]>([]);\n  const [totalPlayerInfo, setTotalPlayerInfo] = useState<ITotalInfo>({\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0,\n  });\n\n  const [computersCards, setComputersCards] = useState<ICard[]>([]);\n  const [totalComputerInfo, setTotalComputerInfo] = useState<ITotalInfo>({\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0,\n  });\n\n  const [didPlayerWin, setDidPlayerWin] = useState<null | boolean>(null);\n  const [didPlayerStand, setDidPlayerStand] = useState<boolean>(false);\n\n  const drawCard = useCallback(() => {\n    if (deckId && playerTurn) {\n      // else it is players turn to pick a card\n      (async () => {\n        const {\n          data: { cards },\n        } = await drawCards(deckId);\n        // add card to playersCards\n        setPlayersCards((prevState) => [...prevState, ...cards]);\n        // the player is done drawing a card\n        // setPlayerTurn(false);\n      })();\n    }\n  }, [deckId, playerTurn]);\n\n  useEffect(() => {\n    (async () => {\n      // create a deck\n      const {\n        data: { deck_id },\n      } = await fetchNewDeck();\n\n      // save the deck_id to state\n      setDeckId(deck_id);\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (!deckId) return;\n\n    // initial cards for computer and player\n    (async () => {\n      // computer draws cards\n      const {\n        data: { cards: computersCards },\n      } = await drawCards(deckId, 2);\n\n      setComputersCards(computersCards);\n\n      // player draws cards\n      const {\n        data: { cards: playerCards },\n      } = await drawCards(deckId, 2);\n\n      setPlayersCards(playerCards);\n\n      // change turns\n      setPlayerTurn(true);\n    })();\n  }, [deckId]);\n\n  // to memoize, pass in the obj key instead\n\n  const calcCardTotal = useCallback((cardsArr: ICard[], setStateFunc: React.Dispatch<React.SetStateAction<ITotalInfo>>) => {\n    let total = 0;\n    const acePositionArr: number[] = [];\n\n      cardsArr.forEach(({ value }, index) => {\n        // if the value is a number, simply add it to currTotal\n         if (value === \"QUEEN\" || value ===\"KING\" || value === \"JACK\") {\n          // if the value is a face card add 10\n          total += 10;\n        } else if (value === \"ACE\" ) {\n          // if the value is an ace, by default is equal to 11\n          total += 11;\n          // acePosition.push(currIndex);\n          acePositionArr.push(index);\n        } else {\n          const NumericVal = Number(value);\n          total += NumericVal;\n        }\n      });\n\n      setStateFunc((prevState) => ({\n        ...prevState,\n        total,\n        acePositions: [...acePositionArr]\n      }));\n  }, []);\n\n  useEffect(() => {\n    // if playersCards were added recalculate the total\n    if (playersCards.length > 0) {\n      calcCardTotal(playersCards, setTotalPlayerInfo);\n    }\n  }, [calcCardTotal, playersCards]);\n\n  useEffect(() => {\n    // if computersCards were added recalculate the total\n    if (computersCards.length > 0) {\n      calcCardTotal(computersCards, setTotalComputerInfo);\n    }\n  }, [calcCardTotal, computersCards]);\n  \n  // check if a winner is present\n  useEffect(() => {\n    // if the player has a total of 21, the game is over and they win\n    if (totalPlayerInfo.total === 21) {\n      setDidPlayerWin(true);\n    } else if (totalComputerInfo.total === 21) {\n      // if the computer has a total of 21, the game is over and it wins\n      setDidPlayerWin(false);\n    } else if (totalPlayerInfo.total > 21) {\n      // if the user has a score of over 21, check to see if they have aces\n      if (totalPlayerInfo.acePositions.length > 0) {\n          // if there are aces, subtract 11 points from the user and add 1, pop an ace from the acePositions \n          setTotalPlayerInfo((prevState) => ({\n            ...prevState,\n            total: (prevState.total - 11) + 1,\n            acePositions: prevState.acePositions.slice(0, -1),\n          }))\n      } else {\n        // if not the user automatically loses\n        setDidPlayerWin(false);\n      }\n    } else if (totalComputerInfo.total > 21) {\n      // if the Computer has a score of over 21 (2 aces), check to see if they have aces\n      if (totalComputerInfo.acePositions.length > 0) {\n          // if there are aces, subtract 11 points from the user and add 1, pop an ace from the acePositions \n          setTotalComputerInfo((prevState) => ({\n            ...prevState,\n            total: (prevState.total - 11) + 1,\n            acePositions: prevState.acePositions.slice(0, -1),\n          }))\n      } else {\n        // if not the computer automatically loses\n        setDidPlayerWin(true);\n      }\n    } else if (didPlayerStand) {\n      // if the player did stand and there is a tie OR the users cards total less than the computers cards, the computer wins\n      if (totalPlayerInfo.total === totalComputerInfo.total || totalPlayerInfo.total < totalComputerInfo.total) {\n        setDidPlayerWin(false);\n      }\n\n      // if the player has more points than the computer, the pplayer wins\n      if (totalPlayerInfo.total > totalComputerInfo.total) {\n        setDidPlayerWin(true);\n      } else {\n        // if the player and computer tie or the player has few points than the computer, the player loses\n        setDidPlayerWin(false);\n      }\n    }\n  }, [didPlayerStand, totalComputerInfo.acePositions.length, totalComputerInfo.total, totalPlayerInfo.acePositions.length, totalPlayerInfo.total]);\n  \n  useEffect(() => {\n    console.log(didPlayerWin);\n  }, [didPlayerWin]);\n\n  return (\n    <div className=\"game-arena\">\n      <section className=\"game-panel panel-one\">\n        <h1>Computer</h1>\n        <MapCards cards={computersCards} />\n        <div>Total: {totalComputerInfo.total}</div>\n      </section>\n      <section className=\"game-panel panel-two\">\n        <div>User</div>\n        <MapCards cards={playersCards} />\n        <section className=\"btn-container\">\n          <button type=\"button\" onClick={() => drawCard()} disabled={didPlayerStand || didPlayerWin !== null}>\n            Hit\n          </button>\n          <button type=\"button\" onClick={() => setDidPlayerStand(true)}>Stand</button>\n        </section>\n        <div>Total: {totalPlayerInfo.total}</div>\n      </section>\n    </div>\n  );\n}\n\n// by default aces can be given a value of 10\n\nexport default GameArena;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}