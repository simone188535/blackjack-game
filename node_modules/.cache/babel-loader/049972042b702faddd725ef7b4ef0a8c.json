{"ast":null,"code":"var _jsxFileName = \"/Users/simoneanthony/Desktop/personal-projects/blackjack-takehome/src/components/GameArena.tsx\",\n  _s = $RefreshSig$();\n// import axios from \"axios\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { fetchNewDeck, drawCards } from \"../API/getRequests\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameArena() {\n  _s();\n  const [playerTurn, setPlayerTurn] = useState(false);\n  const [deckId, setDeckId] = useState(null);\n  // const [cardsInfo, setCardsInfo] = useState<ICardsInfo>({\n  //   playerCards: {\n  //     cards: [],\n  //     total: 0,\n  //   },\n  //   computerCards: {\n  //     cards: [],\n  //     total: 0,\n  //   },\n  // });\n  const [playersCards, setPlayersCards] = useState([]);\n  const [computersCards, setComputersCards] = useState([]);\n  const drawCard = useCallback(() => {\n    if (!deckId) return;\n\n    // if the current player neither play has cards, draw 2 cards, else draw 1\n    if (computersCards.length === 0 && !playerTurn) {\n      (async () => {\n        // computer draws cards\n        const {\n          data: {\n            cards\n          }\n        } = await drawCards(deckId, 2);\n        setComputersCards(cards);\n\n        // change turns\n        setPlayerTurn(true);\n      })();\n    }\n    if (playersCards.length === 0 && playerTurn) {\n      (async () => {\n        const {\n          data: {\n            cards\n          }\n        } = await drawCards(deckId, 2);\n        setPlayersCards(cards);\n      })();\n    }\n\n    // else it is players turn to pick a card\n  }, [deckId, computersCards.length, playerTurn, playersCards.length]);\n\n  // const drawCard = useCallback(() => {\n  //   if (!deckId) return;\n  //   // if the current player neither play has cards, draw 2 cards, else draw 1\n  //   const drawAppropriateNumOfCards = (currPlayerCardArr: ICard[]) =>\n  //     currPlayerCardArr.length === 0\n  //       ? drawCards(deckId, 2)\n  //       : drawCards(deckId, 1);\n\n  //   if (!playerTurn) {\n  //     (async () => {\n  //       // computer draws cards\n  //       const {\n  //         data: { cards },\n  //       } = await drawAppropriateNumOfCards(computersCards);\n\n  //       // add cards to object state\n  //       setPlayersCards(cards);\n  //     })();\n\n  //     setPlayerTurn(true);\n  //   } else {\n  //     (async () => {\n  //       // player draws cards\n  //       const {\n  //         data: { cards },\n  //       } = await drawAppropriateNumOfCards(playersCards);\n\n  //       // add cards to object state\n  //       setComputersCards(cards);\n  //     })();\n  //   }\n  // }, [computersCards, deckId, playerTurn, playersCards]);\n\n  useEffect(() => {\n    (async () => {\n      // create a deck\n      const {\n        data: {\n          deck_id\n        }\n      } = await fetchNewDeck();\n\n      // save the deck_id to state\n      setDeckId(deck_id);\n\n      // draw cards\n      drawCard();\n    })();\n  }, [drawCard]);\n\n  // useEffect(() => {\n  //   console.log(cardsInfo);\n  // }, [cardsInfo]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: \"Hello\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 10\n  }, this);\n}\n_s(GameArena, \"tIOCqYd02ht/6N2KOW8I7UC0GwQ=\");\n_c = GameArena;\nexport default GameArena;\nvar _c;\n$RefreshReg$(_c, \"GameArena\");","map":{"version":3,"names":["useState","useEffect","useCallback","fetchNewDeck","drawCards","GameArena","playerTurn","setPlayerTurn","deckId","setDeckId","playersCards","setPlayersCards","computersCards","setComputersCards","drawCard","length","data","cards","deck_id"],"sources":["/Users/simoneanthony/Desktop/personal-projects/blackjack-takehome/src/components/GameArena.tsx"],"sourcesContent":["// import axios from \"axios\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { fetchNewDeck, drawCards } from \"../API/getRequests\";\n\ninterface ICard {\n  code: string;\n  image: string;\n  // value: number;\n  images: {\n    svg: string;\n    png: string;\n  };\n  value: string;\n  suit: string;\n}\n\ninterface ICardsInfo {\n  playerCards: {\n    cards: ICard[];\n    total: number;\n  };\n  computerCards: {\n    cards: ICard[];\n    total: number;\n  };\n}\n\nfunction GameArena() {\n  const [playerTurn, setPlayerTurn] = useState(false);\n  const [deckId, setDeckId] = useState<null | string>(null);\n  // const [cardsInfo, setCardsInfo] = useState<ICardsInfo>({\n  //   playerCards: {\n  //     cards: [],\n  //     total: 0,\n  //   },\n  //   computerCards: {\n  //     cards: [],\n  //     total: 0,\n  //   },\n  // });\n  const [playersCards, setPlayersCards] = useState<ICard[]>([]);\n  const [computersCards, setComputersCards] = useState<ICard[]>([]);\n\n  const drawCard = useCallback(() => {\n    if (!deckId) return;\n\n    // if the current player neither play has cards, draw 2 cards, else draw 1\n    if (computersCards.length === 0 && !playerTurn) {\n      (async () => {\n        // computer draws cards\n        const {\n          data: { cards },\n        } = await drawCards(deckId, 2);\n        \n        setComputersCards(cards);\n        \n        // change turns\n        setPlayerTurn(true);\n      })();\n    }\n\n    if (playersCards.length === 0 && playerTurn) {\n      (async () => {\n        const {\n          data: { cards },\n        } = await drawCards(deckId, 2);\n        setPlayersCards(cards);\n      })();\n    }\n\n    // else it is players turn to pick a card\n\n\n  }, [deckId, computersCards.length, playerTurn, playersCards.length]);\n\n  // const drawCard = useCallback(() => {\n  //   if (!deckId) return;\n  //   // if the current player neither play has cards, draw 2 cards, else draw 1\n  //   const drawAppropriateNumOfCards = (currPlayerCardArr: ICard[]) =>\n  //     currPlayerCardArr.length === 0\n  //       ? drawCards(deckId, 2)\n  //       : drawCards(deckId, 1);\n\n  //   if (!playerTurn) {\n  //     (async () => {\n  //       // computer draws cards\n  //       const {\n  //         data: { cards },\n  //       } = await drawAppropriateNumOfCards(computersCards);\n\n  //       // add cards to object state\n  //       setPlayersCards(cards);\n  //     })();\n\n  //     setPlayerTurn(true);\n  //   } else {\n  //     (async () => {\n  //       // player draws cards\n  //       const {\n  //         data: { cards },\n  //       } = await drawAppropriateNumOfCards(playersCards);\n\n  //       // add cards to object state\n  //       setComputersCards(cards);\n  //     })();\n  //   }\n  // }, [computersCards, deckId, playerTurn, playersCards]);\n\n  useEffect(() => {\n    (async () => {\n      // create a deck\n      const {\n        data: { deck_id },\n      } = await fetchNewDeck();\n\n      // save the deck_id to state\n      setDeckId(deck_id);\n\n      // draw cards\n      drawCard();\n    })();\n  }, [drawCard]);\n\n  // useEffect(() => {\n  //   console.log(cardsInfo);\n  // }, [cardsInfo]);\n\n  return <div className=\"\">Hello</div>;\n}\n\nexport default GameArena;\n"],"mappings":";;AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,YAAY,EAAEC,SAAS,QAAQ,oBAAoB;AAAC;AAyB7D,SAASC,SAAS,GAAG;EAAA;EACnB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAgB,IAAI,CAAC;EACzD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAU,EAAE,CAAC;EAC7D,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAU,EAAE,CAAC;EAEjE,MAAMc,QAAQ,GAAGZ,WAAW,CAAC,MAAM;IACjC,IAAI,CAACM,MAAM,EAAE;;IAEb;IACA,IAAII,cAAc,CAACG,MAAM,KAAK,CAAC,IAAI,CAACT,UAAU,EAAE;MAC9C,CAAC,YAAY;QACX;QACA,MAAM;UACJU,IAAI,EAAE;YAAEC;UAAM;QAChB,CAAC,GAAG,MAAMb,SAAS,CAACI,MAAM,EAAE,CAAC,CAAC;QAE9BK,iBAAiB,CAACI,KAAK,CAAC;;QAExB;QACAV,aAAa,CAAC,IAAI,CAAC;MACrB,CAAC,GAAG;IACN;IAEA,IAAIG,YAAY,CAACK,MAAM,KAAK,CAAC,IAAIT,UAAU,EAAE;MAC3C,CAAC,YAAY;QACX,MAAM;UACJU,IAAI,EAAE;YAAEC;UAAM;QAChB,CAAC,GAAG,MAAMb,SAAS,CAACI,MAAM,EAAE,CAAC,CAAC;QAC9BG,eAAe,CAACM,KAAK,CAAC;MACxB,CAAC,GAAG;IACN;;IAEA;EAGF,CAAC,EAAE,CAACT,MAAM,EAAEI,cAAc,CAACG,MAAM,EAAET,UAAU,EAAEI,YAAY,CAACK,MAAM,CAAC,CAAC;;EAEpE;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEAd,SAAS,CAAC,MAAM;IACd,CAAC,YAAY;MACX;MACA,MAAM;QACJe,IAAI,EAAE;UAAEE;QAAQ;MAClB,CAAC,GAAG,MAAMf,YAAY,EAAE;;MAExB;MACAM,SAAS,CAACS,OAAO,CAAC;;MAElB;MACAJ,QAAQ,EAAE;IACZ,CAAC,GAAG;EACN,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACA;EACA;;EAEA,oBAAO;IAAK,SAAS,EAAC,EAAE;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAY;AACtC;AAAC,GArGQT,SAAS;AAAA,KAATA,SAAS;AAuGlB,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module"}