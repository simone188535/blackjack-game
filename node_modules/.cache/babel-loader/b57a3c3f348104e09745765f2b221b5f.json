{"ast":null,"code":"var _jsxFileName = \"/Users/simoneanthony/Desktop/personal-projects/blackjack-takehome/src/components/GameArena.tsx\",\n  _s = $RefreshSig$();\n// import axios from \"axios\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { fetchNewDeck, drawCards } from \"../API/getRequests\";\nimport MapCards from \"./MapCards\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameArena() {\n  _s();\n  const [playerTurn, setPlayerTurn] = useState(false);\n  const [deckId, setDeckId] = useState(null);\n  const [playersCards, setPlayersCards] = useState([]);\n  const [totalPlayerInfo, setTotalPlayerInfo] = useState({\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0\n  });\n  const [computersCards, setComputersCards] = useState([]);\n  const [totalComputerInfo, setTotalComputerInfo] = useState({\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0\n  });\n  const [didPlayerWin, setDidPlayerWin] = useState(null);\n  const drawCard = useCallback(() => {\n    if (deckId && playerTurn) {\n      // else it is players turn to pick a card\n      (async () => {\n        const {\n          data: {\n            cards\n          }\n        } = await drawCards(deckId);\n        // add card to playersCards\n        setPlayersCards(prevState => [...prevState, ...cards]);\n        // the player is done drawing a card\n        // setPlayerTurn(false);\n      })();\n    }\n  }, [deckId, playerTurn]);\n  useEffect(() => {\n    (async () => {\n      // create a deck\n      const {\n        data: {\n          deck_id\n        }\n      } = await fetchNewDeck();\n\n      // save the deck_id to state\n      setDeckId(deck_id);\n    })();\n  }, []);\n  const InitialDraw = useCallback(async () => {\n    if (!deckId) return;\n    // computer draws cards\n    const {\n      data: {\n        cards: computersCards\n      }\n    } = await drawCards(deckId, 2);\n    setComputersCards(computersCards);\n\n    // player draws cards\n    const {\n      data: {\n        cards: playerCards\n      }\n    } = await drawCards(deckId, 2);\n    setPlayersCards(playerCards);\n\n    // change turns\n    setPlayerTurn(true);\n  }, [deckId]);\n  useEffect(() => {\n    // initial cards for computer and player\n    InitialDraw();\n  }, [InitialDraw]);\n\n  // const calcCardTotal = (totalInfoObj: ITotalInfo, arr: ICard[]) => {\n  //   // start array at lastReadCardIndex\n  //   let currIndex = totalInfoObj.lastReadCardIndex;\n  //   console.log(currIndex);\n  //   const acePosition: Number[] = [];\n\n  //   const arrFromStartingPoint = arr.slice(currIndex);\n  //   let currTotal = totalInfoObj.total;\n\n  //   arrFromStartingPoint.forEach(({ value }) => {\n  //     // if the value is a number, simply add it to currTotal\n  //      if (value === \"QUEEN\" || value ===\"KING\" || value === \"JACK\") {\n  //       console.log('Face');\n  //       // if the value is a face card add 10\n  //       currTotal += 10;\n  //     } else if (value === \"ACE\" ) {\n  //       console.log('Ace');\n  //       // if the value is an ace, by default is equal to 11\n  //       currTotal += 11;\n  //       acePosition.push(currIndex);\n  //     } else {\n  //       const NumericVal = Number(value);\n  //       currTotal += NumericVal;\n  //     }\n  //     currIndex += 1;\n  //   });\n\n  //   return { currTotal, acePosition, currIndex };\n\n  //   // // update state for the provided obj\n\n  //   // setStateToChange((prevState) => ({\n  //   //   ...prevState,\n  //   //   total: currTotal,\n  //   //   acePositions: [...prevState.acePositions, ...acePosition],\n  //   //   lastReadCardIndex: currIndex,\n  //   // }));\n  // };\n\n  // to memoize, pass in the obj key instead\n\n  const calcCardTotal = useCallback((cardsArr, setStateFunc) => {\n    let total = 0;\n    const acePositionArr = [];\n    cardsArr.forEach((_ref, index) => {\n      let {\n        value\n      } = _ref;\n      // if the value is a number, simply add it to currTotal\n      if (value === \"QUEEN\" || value === \"KING\" || value === \"JACK\") {\n        // if the value is a face card add 10\n        total += 10;\n      } else if (value === \"ACE\") {\n        // if the value is an ace, by default is equal to 11\n        total += 11;\n        // acePosition.push(currIndex);\n        acePositionArr.push(index);\n      } else {\n        const NumericVal = Number(value);\n        total += NumericVal;\n      }\n    });\n    setStateFunc(prevState => ({\n      ...prevState,\n      total,\n      acePositions: [...acePositionArr]\n    }));\n  }, []);\n  useEffect(() => {\n    // if playersCards were added recalculate the total\n    if (playersCards.length > 0) {\n      calcCardTotal(playersCards, setTotalPlayerInfo);\n    }\n  }, [calcCardTotal, playersCards]);\n  useEffect(() => {\n    // if computersCards were added recalculate the total\n    if (computersCards.length > 0) {\n      calcCardTotal(computersCards, setTotalComputerInfo);\n    }\n  }, [calcCardTotal, computersCards]);\n\n  // // reset game \n  const resetGame = () => {\n    // reset deckID\n    setDeckId(null);\n    // reset players turn\n    setPlayerTurn(false);\n    // remove all cards from users\n    setPlayersCards([]);\n    setComputersCards([]);\n    // reset totals\n    setTotalPlayerInfo({\n      total: 0,\n      acePositions: [],\n      lastReadCardIndex: 0\n    });\n    setTotalComputerInfo({\n      total: 0,\n      acePositions: [],\n      lastReadCardIndex: 0\n    });\n    // unset winner\n    setDidPlayerWin(null);\n  };\n  const checkForWinner = useCallback(() => {}, []);\n  // check if a winner is present\n  useEffect(() => {\n    // if the player has a total of 21, the game is over and they win\n    if (totalPlayerInfo.total === 21) {\n      setDidPlayerWin(true);\n    } else if (totalComputerInfo.total === 21) {\n      // if the computer has a total of 21, the game is over and it wins\n      setDidPlayerWin(false);\n    } else if (totalPlayerInfo.total > 21) {\n      // if the user has a score of over 21, check to see if they have aces\n      if (totalPlayerInfo.acePositions.length > 0) {\n        // if there are aces, subtract 11 points from the user and add 1, pop an ace from the acePositions \n        setTotalPlayerInfo(prevState => ({\n          ...prevState,\n          total: prevState.total - 11 + 1,\n          acePositions: prevState.acePositions.slice(0, -1)\n        }));\n      } else {\n        // if not the user automatically loses\n        setDidPlayerWin(false);\n      }\n    }\n  }, [totalComputerInfo.total, totalPlayerInfo.acePositions.length, totalPlayerInfo.total]);\n  useEffect(() => {\n    console.log(didPlayerWin);\n  }, [didPlayerWin]);\n\n  // useEffect(() => {\n  //   // if cards were added recalculate the total\n\n  //   // if the most current playersCards was not read, recalculate the total\n  //   // if (playersCards.length !== totalPlayerInfo.lastReadCardIndex) {\n  //     const {\n  //       currTotal: currTotalPlayer,\n  //       acePosition: acePositionPlayer,\n  //       currIndex: currIndexPlayer,\n  //     } = calcCardTotal(totalPlayerInfo, playersCards);\n\n  //     // // update state for the provided obj\n\n  // setTotalPlayerInfo((prevState) => ({\n  //   ...prevState,\n  //   total: currTotalPlayer,\n  //   acePositions: [...prevState.acePositions, ...acePositionPlayer],\n  //   lastReadCardIndex: currIndexPlayer,\n  // }));\n  //   // }\n\n  //   // if the most current card was not read, recalculate the total\n  //   // if (computersCards.length !== totalComputerInfo.lastReadCardIndex) {\n  //   //   const {} = calcCardTotal(totalComputerInfo, computersCards);\n\n  //     // // update state for the provided obj\n\n  //     // setTotalComputerInfo((prevState) => ({\n  //     //   ...prevState,\n  //     //   total: currTotal,\n  //     //   acePositions: [...prevState.acePositions, ...acePosition],\n  //     //   lastReadCardIndex: currIndex,\n  //     // }));\n  //   // }\n  // }, [playersCards, totalPlayerInfo]);\n\n  useEffect(() => {\n    console.log(\"playersCards\", playersCards);\n  }, [playersCards]);\n  useEffect(() => {\n    console.log(\"totalPlayerInfo\", totalPlayerInfo);\n  }, [totalPlayerInfo]);\n\n  // useEffect(() => {\n  //   console.log(\"playersCards\", playersCards);\n  //   console.log(\"computersCards\", computersCards);\n  // }, [computersCards, playersCards]);\n\n  // useEffect(() => {\n  //   console.log(\"totalPlayerInfo\", totalPlayerInfo);\n  //   console.log(\"totalComputerInfo\", totalComputerInfo);\n  // }, [totalComputerInfo, totalPlayerInfo]);\n\n  // const calcTotals = (currentUser: ITotalInfo, cards: ICard[]) => {\n\n  //   // calculate the current total using the last read card index\n\n  // }\n\n  // useEffect(() => {\n  //   // if the computer or the user have a number larger than 21, check if they have aces, if so subtract the 10 from the value and add 1\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-arena\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"game-panel panel-one\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Computer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapCards, {\n        cards: computersCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Total: \", totalComputerInfo.total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"game-panel panel-two\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapCards, {\n        cards: playersCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"btn-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => drawCard(),\n          children: \"Hit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          children: \"Stand\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => resetGame(),\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Total: \", totalPlayerInfo.total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 300,\n    columnNumber: 5\n  }, this);\n}\n\n// by default aces can be given a value of 10\n_s(GameArena, \"7YVUc7fz0MM9Mfxf1wF16PmF6M4=\");\n_c = GameArena;\nexport default GameArena;\nvar _c;\n$RefreshReg$(_c, \"GameArena\");","map":{"version":3,"names":["useState","useEffect","useCallback","fetchNewDeck","drawCards","MapCards","GameArena","playerTurn","setPlayerTurn","deckId","setDeckId","playersCards","setPlayersCards","totalPlayerInfo","setTotalPlayerInfo","total","acePositions","lastReadCardIndex","computersCards","setComputersCards","totalComputerInfo","setTotalComputerInfo","didPlayerWin","setDidPlayerWin","drawCard","data","cards","prevState","deck_id","InitialDraw","playerCards","calcCardTotal","cardsArr","setStateFunc","acePositionArr","forEach","index","value","push","NumericVal","Number","length","resetGame","checkForWinner","slice","console","log"],"sources":["/Users/simoneanthony/Desktop/personal-projects/blackjack-takehome/src/components/GameArena.tsx"],"sourcesContent":["// import axios from \"axios\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { fetchNewDeck, drawCards } from \"../API/getRequests\";\nimport MapCards from \"./MapCards\";\n\nexport interface ICard {\n  code: string;\n  image: string;\n  images: {\n    svg: string;\n    png: string;\n  };\n  value: string;\n  suit: string;\n}\n\ninterface ITotalInfo {\n  total: number;\n  acePositions: Number[];\n  lastReadCardIndex: number;\n}\n\nfunction GameArena() {\n  const [playerTurn, setPlayerTurn] = useState(false);\n  const [deckId, setDeckId] = useState<null | string>(null);\n\n  const [playersCards, setPlayersCards] = useState<ICard[]>([]);\n  const [totalPlayerInfo, setTotalPlayerInfo] = useState<ITotalInfo>({\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0,\n  });\n\n  const [computersCards, setComputersCards] = useState<ICard[]>([]);\n  const [totalComputerInfo, setTotalComputerInfo] = useState<ITotalInfo>({\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0,\n  });\n\n  const [didPlayerWin, setDidPlayerWin] = useState<null | boolean>(null);\n\n  const drawCard = useCallback(() => {\n    if (deckId && playerTurn) {\n      // else it is players turn to pick a card\n      (async () => {\n        const {\n          data: { cards },\n        } = await drawCards(deckId);\n        // add card to playersCards\n        setPlayersCards((prevState) => [...prevState, ...cards]);\n        // the player is done drawing a card\n        // setPlayerTurn(false);\n      })();\n    }\n  }, [deckId, playerTurn]);\n\n  useEffect(() => {\n    (async () => {\n      // create a deck\n      const {\n        data: { deck_id },\n      } = await fetchNewDeck();\n\n      // save the deck_id to state\n      setDeckId(deck_id);\n    })();\n  }, []);\n\n  \n  const InitialDraw = useCallback(async () => {\n    if (!deckId) return;\n    // computer draws cards\n    const {\n      data: { cards: computersCards },\n    } = await drawCards(deckId, 2);\n\n    setComputersCards(computersCards);\n\n    // player draws cards\n    const {\n      data: { cards: playerCards },\n    } = await drawCards(deckId, 2);\n\n    setPlayersCards(playerCards);\n\n    // change turns\n    setPlayerTurn(true);\n  }, [deckId])\n\n  useEffect(() => {\n    // initial cards for computer and player\n    InitialDraw();\n  }, [InitialDraw]);\n\n  // const calcCardTotal = (totalInfoObj: ITotalInfo, arr: ICard[]) => {\n  //   // start array at lastReadCardIndex\n  //   let currIndex = totalInfoObj.lastReadCardIndex;\n  //   console.log(currIndex);\n  //   const acePosition: Number[] = [];\n\n  //   const arrFromStartingPoint = arr.slice(currIndex);\n  //   let currTotal = totalInfoObj.total;\n\n  //   arrFromStartingPoint.forEach(({ value }) => {\n  //     // if the value is a number, simply add it to currTotal\n  //      if (value === \"QUEEN\" || value ===\"KING\" || value === \"JACK\") {\n  //       console.log('Face');\n  //       // if the value is a face card add 10\n  //       currTotal += 10;\n  //     } else if (value === \"ACE\" ) {\n  //       console.log('Ace');\n  //       // if the value is an ace, by default is equal to 11\n  //       currTotal += 11;\n  //       acePosition.push(currIndex);\n  //     } else {\n  //       const NumericVal = Number(value);\n  //       currTotal += NumericVal;\n  //     }\n  //     currIndex += 1;\n  //   });\n\n  //   return { currTotal, acePosition, currIndex };\n\n  //   // // update state for the provided obj\n\n  //   // setStateToChange((prevState) => ({\n  //   //   ...prevState,\n  //   //   total: currTotal,\n  //   //   acePositions: [...prevState.acePositions, ...acePosition],\n  //   //   lastReadCardIndex: currIndex,\n  //   // }));\n  // };\n\n  // to memoize, pass in the obj key instead\n\n  const calcCardTotal = useCallback((cardsArr: ICard[], setStateFunc: React.Dispatch<React.SetStateAction<ITotalInfo>>) => {\n    let total = 0;\n    const acePositionArr: number[] = [];\n\n      cardsArr.forEach(({ value }, index) => {\n        // if the value is a number, simply add it to currTotal\n         if (value === \"QUEEN\" || value ===\"KING\" || value === \"JACK\") {\n          // if the value is a face card add 10\n          total += 10;\n        } else if (value === \"ACE\" ) {\n          // if the value is an ace, by default is equal to 11\n          total += 11;\n          // acePosition.push(currIndex);\n          acePositionArr.push(index);\n        } else {\n          const NumericVal = Number(value);\n          total += NumericVal;\n        }\n      });\n\n      setStateFunc((prevState) => ({\n        ...prevState,\n        total,\n        acePositions: [...acePositionArr]\n      }));\n  }, []);\n\n  useEffect(() => {\n    // if playersCards were added recalculate the total\n    if (playersCards.length > 0) {\n      calcCardTotal(playersCards, setTotalPlayerInfo);\n    }\n  }, [calcCardTotal, playersCards]);\n\n  useEffect(() => {\n    // if computersCards were added recalculate the total\n    if (computersCards.length > 0) {\n      calcCardTotal(computersCards, setTotalComputerInfo);\n    }\n  }, [calcCardTotal, computersCards]);\n\n\n  // // reset game \n  const resetGame = () => {\n    // reset deckID\n    setDeckId(null);\n    // reset players turn\n    setPlayerTurn(false);\n    // remove all cards from users\n    setPlayersCards([]);\n    setComputersCards([]);\n    // reset totals\n    setTotalPlayerInfo({\n      total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0,\n    });\n    setTotalComputerInfo({\n      total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0,\n    });\n    // unset winner\n    setDidPlayerWin(null);\n  }\n\n  const checkForWinner = useCallback(() => {\n\n  }, []);\n  // check if a winner is present\n  useEffect(() => {\n      // if the player has a total of 21, the game is over and they win\n      if (totalPlayerInfo.total === 21) {\n        setDidPlayerWin(true);\n      } else if (totalComputerInfo.total === 21) {\n        // if the computer has a total of 21, the game is over and it wins\n        setDidPlayerWin(false);\n      } else if (totalPlayerInfo.total > 21) {\n        // if the user has a score of over 21, check to see if they have aces\n        if (totalPlayerInfo.acePositions.length > 0) {\n            // if there are aces, subtract 11 points from the user and add 1, pop an ace from the acePositions \n            setTotalPlayerInfo((prevState) => ({\n              ...prevState,\n              total: (prevState.total - 11) + 1,\n              acePositions: prevState.acePositions.slice(0, -1),\n            }))\n        } else {\n        // if not the user automatically loses\n        setDidPlayerWin(false);\n        }\n\n      }\n  }, [totalComputerInfo.total, totalPlayerInfo.acePositions.length, totalPlayerInfo.total]);\n  \n  useEffect(() => {\n    console.log(didPlayerWin);\n  }, [didPlayerWin]);\n\n  // useEffect(() => {\n  //   // if cards were added recalculate the total\n\n  //   // if the most current playersCards was not read, recalculate the total\n  //   // if (playersCards.length !== totalPlayerInfo.lastReadCardIndex) {\n  //     const {\n  //       currTotal: currTotalPlayer,\n  //       acePosition: acePositionPlayer,\n  //       currIndex: currIndexPlayer,\n  //     } = calcCardTotal(totalPlayerInfo, playersCards);\n\n  //     // // update state for the provided obj\n\n      // setTotalPlayerInfo((prevState) => ({\n      //   ...prevState,\n      //   total: currTotalPlayer,\n      //   acePositions: [...prevState.acePositions, ...acePositionPlayer],\n      //   lastReadCardIndex: currIndexPlayer,\n      // }));\n  //   // }\n\n  //   // if the most current card was not read, recalculate the total\n  //   // if (computersCards.length !== totalComputerInfo.lastReadCardIndex) {\n  //   //   const {} = calcCardTotal(totalComputerInfo, computersCards);\n\n  //     // // update state for the provided obj\n\n  //     // setTotalComputerInfo((prevState) => ({\n  //     //   ...prevState,\n  //     //   total: currTotal,\n  //     //   acePositions: [...prevState.acePositions, ...acePosition],\n  //     //   lastReadCardIndex: currIndex,\n  //     // }));\n  //   // }\n  // }, [playersCards, totalPlayerInfo]);\n\n  useEffect(() => {\n    console.log(\"playersCards\", playersCards);\n  }, [playersCards]);\n\n    useEffect(() => {\n    console.log(\"totalPlayerInfo\", totalPlayerInfo);\n  }, [totalPlayerInfo]);\n\n  // useEffect(() => {\n  //   console.log(\"playersCards\", playersCards);\n  //   console.log(\"computersCards\", computersCards);\n  // }, [computersCards, playersCards]);\n\n  // useEffect(() => {\n  //   console.log(\"totalPlayerInfo\", totalPlayerInfo);\n  //   console.log(\"totalComputerInfo\", totalComputerInfo);\n  // }, [totalComputerInfo, totalPlayerInfo]);\n\n  // const calcTotals = (currentUser: ITotalInfo, cards: ICard[]) => {\n\n  //   // calculate the current total using the last read card index\n\n  // }\n\n  // useEffect(() => {\n  //   // if the computer or the user have a number larger than 21, check if they have aces, if so subtract the 10 from the value and add 1\n  // }, []);\n\n  return (\n    <div className=\"game-arena\">\n      <section className=\"game-panel panel-one\">\n        <h1>Computer</h1>\n        <MapCards cards={computersCards} />\n        <div>Total: {totalComputerInfo.total}</div>\n      </section>\n      <section className=\"game-panel panel-two\">\n        <div>User</div>\n        <MapCards cards={playersCards} />\n        <section className=\"btn-container\">\n          <button type=\"button\" onClick={() => drawCard()}>\n            Hit\n          </button>\n          <button type=\"button\">Stand</button>\n          <button type=\"button\" onClick={() => resetGame()}>Reset</button>\n        </section>\n        <div>Total: {totalPlayerInfo.total}</div>\n      </section>\n    </div>\n  );\n}\n\n// by default aces can be given a value of 10\n\nexport default GameArena;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}