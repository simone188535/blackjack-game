{"ast":null,"code":"var _jsxFileName = \"/Users/simoneanthony/Desktop/personal-projects/blackjack-takehome/src/components/GameArena.tsx\",\n  _s = $RefreshSig$();\n// import axios from \"axios\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { fetchNewDeck, drawCards } from \"../API/getRequests\";\nimport MapCards from \"./MapCards\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameArena() {\n  _s();\n  const [playerTurn, setPlayerTurn] = useState(false);\n  const [deckId, setDeckId] = useState(null);\n  const [playersCards, setPlayersCards] = useState([]);\n  const [computersCards, setComputersCards] = useState([]);\n  const [TotalInfo, setTotalInfo] = useState([{\n    user: 'computer',\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0\n  }, {\n    user: 'player',\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0\n  }]);\n  const [didPlayerWin, setDidPlayerWin] = useState(null);\n  const drawCard = useCallback(() => {\n    if (deckId && playerTurn) {\n      // else it is players turn to pick a card\n      (async () => {\n        const {\n          data: {\n            cards\n          }\n        } = await drawCards(deckId);\n        // add card to playersCards\n        setPlayersCards(prevState => [...prevState, ...cards]);\n        // the player is done drawing a card\n        // setPlayerTurn(false);\n      })();\n    }\n  }, [deckId, playerTurn]);\n  useEffect(() => {\n    (async () => {\n      // create a deck\n      const {\n        data: {\n          deck_id\n        }\n      } = await fetchNewDeck();\n\n      // save the deck_id to state\n      setDeckId(deck_id);\n    })();\n  }, []);\n  useEffect(() => {\n    if (!deckId) return;\n\n    // initial cards for computer and player\n    (async () => {\n      // computer draws cards\n      const {\n        data: {\n          cards: computersCards\n        }\n      } = await drawCards(deckId, 2);\n      setComputersCards(computersCards);\n\n      // player draws cards\n      const {\n        data: {\n          cards: playerCards\n        }\n      } = await drawCards(deckId, 2);\n      setPlayersCards(playerCards);\n\n      // change turns\n      setPlayerTurn(true);\n    })();\n  }, [deckId]);\n  useEffect(() => {\n    console.log(\"playersCards\", playersCards);\n    console.log(\"computersCards\", computersCards);\n  }, [computersCards, playersCards]);\n  const calcTotals = function (currentUser) {\n\n    // calculate the current total using the last read card index\n    let lastIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  };\n\n  // useEffect(() => {\n  //   // if the computer or the user have a number larger than 21, check if they have aces, if so subtract the 10 from the value and add 1\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-arena\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"game-panel panel-one\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Computer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapCards, {\n        cards: computersCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Total: \", TotalInfo.computer.total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"game-panel panel-two\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapCards, {\n        cards: playersCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"btn-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => drawCard(),\n          children: \"Hit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          children: \"Stand\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Total: \", TotalInfo.player.total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n\n// by default aces can be given a value of 10\n_s(GameArena, \"S/DDBk+O3zfGdiNGRgdqwPh1U54=\");\n_c = GameArena;\nexport default GameArena;\nvar _c;\n$RefreshReg$(_c, \"GameArena\");","map":{"version":3,"names":["useState","useEffect","useCallback","fetchNewDeck","drawCards","MapCards","GameArena","playerTurn","setPlayerTurn","deckId","setDeckId","playersCards","setPlayersCards","computersCards","setComputersCards","TotalInfo","setTotalInfo","user","total","acePositions","lastReadCardIndex","didPlayerWin","setDidPlayerWin","drawCard","data","cards","prevState","deck_id","playerCards","console","log","calcTotals","currentUser","lastIndex","computer","player"],"sources":["/Users/simoneanthony/Desktop/personal-projects/blackjack-takehome/src/components/GameArena.tsx"],"sourcesContent":["// import axios from \"axios\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { fetchNewDeck, drawCards } from \"../API/getRequests\";\nimport MapCards from \"./MapCards\";\n\nexport interface ICard {\n  code: string;\n  image: string;\n  images: {\n    svg: string;\n    png: string;\n  };\n  value: string;\n  suit: string;\n}\n\ninterface ITotalInfo {\n  user: string;\n  total: number;\n  acePositions: [];\n  lastReadCardIndex: number;\n}\n\nfunction GameArena() {\n  const [playerTurn, setPlayerTurn] = useState(false);\n  const [deckId, setDeckId] = useState<null | string>(null);\n\n  const [playersCards, setPlayersCards] = useState<ICard[]>([]);\n\n  const [computersCards, setComputersCards] = useState<ICard[]>([]);\n\n  const [TotalInfo, setTotalInfo]  = useState<ITotalInfo[]>([{\n    user: 'computer',\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0,\n},\n{\n  user: 'player',\n  total: 0,\n  acePositions: [],\n  lastReadCardIndex: 0,\n}]);\n\n  const [didPlayerWin, setDidPlayerWin] = useState<null | boolean>(null);\n\n  const drawCard = useCallback(() => {\n    if (deckId && playerTurn) {\n      // else it is players turn to pick a card\n      (async () => {\n        const {\n          data: { cards },\n        } = await drawCards(deckId);\n        // add card to playersCards\n        setPlayersCards((prevState) => [...prevState, ...cards]);\n        // the player is done drawing a card\n        // setPlayerTurn(false);\n      })();\n    }\n  }, [deckId, playerTurn]);\n\n  useEffect(() => {\n    (async () => {\n      // create a deck\n      const {\n        data: { deck_id },\n      } = await fetchNewDeck();\n\n      // save the deck_id to state\n      setDeckId(deck_id);\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (!deckId) return;\n\n    // initial cards for computer and player\n    (async () => {\n      // computer draws cards\n      const {\n        data: { cards: computersCards },\n      } = await drawCards(deckId, 2);\n\n      setComputersCards(computersCards);\n\n      // player draws cards\n      const {\n        data: { cards: playerCards },\n      } = await drawCards(deckId, 2);\n\n      setPlayersCards(playerCards);\n\n      // change turns\n      setPlayerTurn(true);\n    })();\n  }, [deckId]);\n\n  useEffect(() => {\n    console.log(\"playersCards\", playersCards);\n    console.log(\"computersCards\", computersCards);\n  }, [computersCards, playersCards]);\n\n  const calcTotals = (currentUser: ITotalInfo, lastIndex: number = 0) => {\n\n    // calculate the current total using the last read card index\n\n  }\n\n  // useEffect(() => {\n  //   // if the computer or the user have a number larger than 21, check if they have aces, if so subtract the 10 from the value and add 1\n  // }, []);\n\n\n\n\n  return (\n    <div className=\"game-arena\">\n      <section className=\"game-panel panel-one\">\n        <h1>Computer</h1>\n        <MapCards cards={computersCards} />\n        <div>Total: {TotalInfo.computer.total}</div>\n      </section>\n      <section className=\"game-panel panel-two\">\n        <div>User</div>\n        <MapCards cards={playersCards} />\n        <section className=\"btn-container\">\n          <button type=\"button\" onClick={() => drawCard()}>\n            Hit\n          </button>\n          <button type=\"button\">Stand</button>\n        </section>\n        <div>Total: {TotalInfo.player.total}</div>\n      </section>\n    </div>\n  );\n}\n\n// by default aces can be given a value of 10\n\nexport default GameArena;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}