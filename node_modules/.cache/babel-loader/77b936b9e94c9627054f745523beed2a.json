{"ast":null,"code":"var _jsxFileName = \"/Users/simoneanthony/Desktop/personal-projects/blackjack-takehome/src/components/GameArena.tsx\",\n  _s = $RefreshSig$();\n// import axios from \"axios\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { fetchNewDeck, drawCards } from \"../API/getRequests\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// interface ICardsInfo {\n//   playerCards: {\n//     cards: ICard[];\n//     total: number;\n//   };\n//   computerCards: {\n//     cards: ICard[];\n//     total: number;\n//   };\n// }\n\nfunction GameArena() {\n  _s();\n  const [playerTurn, setPlayerTurn] = useState(false);\n  const [deckId, setDeckId] = useState(null);\n  const [playerDrawCard, setPlayerDrawCard] = useState(false);\n  const [playersCards, setPlayersCards] = useState([]);\n  const [computersCards, setComputersCards] = useState([]);\n  const drawCard = useCallback(() => {\n    if (!deckId) return;\n\n    // if the current player neither play has cards, draw 2 cards, else draw 1\n    if (computersCards.length === 0 && !playerTurn) {\n      (async () => {\n        // computer draws cards\n        const {\n          data: {\n            cards\n          }\n        } = await drawCards(deckId, 2);\n        setComputersCards(cards);\n\n        // change turns\n        setPlayerTurn(true);\n        setPlayerDrawCard(true);\n      })();\n    }\n    if (playersCards.length === 0 && playerTurn && playerDrawCard) {\n      (async () => {\n        const {\n          data: {\n            cards\n          }\n        } = await drawCards(deckId, 2);\n        setPlayersCards(cards);\n        // the player is done drawing a card\n        setPlayerTurn(false);\n      })();\n    } else if (playerTurn && playerDrawCard) {\n      // else it is players turn to pick a card\n      (async () => {\n        const {\n          data: {\n            cards\n          }\n        } = await drawCards(deckId);\n        console.log(cards);\n        // add card to playersCards\n        setPlayersCards(prevState => [...prevState, ...cards]);\n        // the player is done drawing a card\n        setPlayerTurn(false);\n      })();\n    }\n  }, [deckId, computersCards.length, playerTurn, playersCards.length, playerDrawCard]);\n\n  // const drawCard = useCallback(() => {\n  //   if (!deckId) return;\n  //   // if the current player neither play has cards, draw 2 cards, else draw 1\n  //   const drawAppropriateNumOfCards = (currPlayerCardArr: ICard[]) =>\n  //     currPlayerCardArr.length === 0\n  //       ? drawCards(deckId, 2)\n  //       : drawCards(deckId, 1);\n\n  //   if (!playerTurn) {\n  //     (async () => {\n  //       // computer draws cards\n  //       const {\n  //         data: { cards },\n  //       } = await drawAppropriateNumOfCards(computersCards);\n\n  //       // add cards to object state\n  //       setPlayersCards(cards);\n  //     })();\n\n  //     setPlayerTurn(true);\n  //   } else {\n  //     (async () => {\n  //       // player draws cards\n  //       const {\n  //         data: { cards },\n  //       } = await drawAppropriateNumOfCards(playersCards);\n\n  //       // add cards to object state\n  //       setComputersCards(cards);\n  //     })();\n  //   }\n  // }, [computersCards, deckId, playerTurn, playersCards]);\n\n  useEffect(() => {\n    (async () => {\n      // create a deck\n      const {\n        data: {\n          deck_id\n        }\n      } = await fetchNewDeck();\n\n      // save the deck_id to state\n      setDeckId(deck_id);\n\n      // draw cards\n      drawCard();\n    })();\n  }, [drawCard]);\n  useEffect(() => {\n    console.log(\"playersCards\", playersCards);\n    console.log(\"computersCards\", computersCards);\n  }, [computersCards, playersCards]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: \"Hello\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 10\n  }, this);\n}\n_s(GameArena, \"fGQ/zOrmyvrSkEjcZxCOHgAQBrI=\");\n_c = GameArena;\nexport default GameArena;\nvar _c;\n$RefreshReg$(_c, \"GameArena\");","map":{"version":3,"names":["useState","useEffect","useCallback","fetchNewDeck","drawCards","GameArena","playerTurn","setPlayerTurn","deckId","setDeckId","playerDrawCard","setPlayerDrawCard","playersCards","setPlayersCards","computersCards","setComputersCards","drawCard","length","data","cards","console","log","prevState","deck_id"],"sources":["/Users/simoneanthony/Desktop/personal-projects/blackjack-takehome/src/components/GameArena.tsx"],"sourcesContent":["// import axios from \"axios\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { fetchNewDeck, drawCards } from \"../API/getRequests\";\n\nexport interface ICard {\n  code: string;\n  image: string;\n  // value: number;\n  images: {\n    svg: string;\n    png: string;\n  };\n  value: string;\n  suit: string;\n}\n\n// interface ICardsInfo {\n//   playerCards: {\n//     cards: ICard[];\n//     total: number;\n//   };\n//   computerCards: {\n//     cards: ICard[];\n//     total: number;\n//   };\n// }\n\nfunction GameArena() {\n  const [playerTurn, setPlayerTurn] = useState(false);\n  const [deckId, setDeckId] = useState<null | string>(null);\n  const [playerDrawCard, setPlayerDrawCard] = useState(false);\n  const [playersCards, setPlayersCards] = useState<ICard[]>([]);\n  const [computersCards, setComputersCards] = useState<ICard[]>([]);\n\n  const drawCard = useCallback(() => {\n    if (!deckId) return;\n\n    // if the current player neither play has cards, draw 2 cards, else draw 1\n    if (computersCards.length === 0 && !playerTurn) {\n      (async () => {\n        // computer draws cards\n        const {\n          data: { cards },\n        } = await drawCards(deckId, 2);\n\n        setComputersCards(cards);\n\n        // change turns\n        setPlayerTurn(true);\n        setPlayerDrawCard(true);\n      })();\n    }\n\n    if (playersCards.length === 0 && playerTurn && playerDrawCard) {\n      (async () => {\n        const {\n          data: { cards },\n        } = await drawCards(deckId, 2);\n\n        setPlayersCards(cards);\n        // the player is done drawing a card\n        setPlayerTurn(false);\n      })();\n    } else if(playerTurn && playerDrawCard) {\n      // else it is players turn to pick a card\n      (async () => {\n        const {\n          data: { cards },\n        } = await drawCards(deckId);\n        console.log(cards);\n        // add card to playersCards\n        setPlayersCards(prevState => [...prevState, ...cards]);\n        // the player is done drawing a card\n        setPlayerTurn(false);\n      })();\n    }\n  }, [deckId, computersCards.length, playerTurn, playersCards.length, playerDrawCard]);\n\n  // const drawCard = useCallback(() => {\n  //   if (!deckId) return;\n  //   // if the current player neither play has cards, draw 2 cards, else draw 1\n  //   const drawAppropriateNumOfCards = (currPlayerCardArr: ICard[]) =>\n  //     currPlayerCardArr.length === 0\n  //       ? drawCards(deckId, 2)\n  //       : drawCards(deckId, 1);\n\n  //   if (!playerTurn) {\n  //     (async () => {\n  //       // computer draws cards\n  //       const {\n  //         data: { cards },\n  //       } = await drawAppropriateNumOfCards(computersCards);\n\n  //       // add cards to object state\n  //       setPlayersCards(cards);\n  //     })();\n\n  //     setPlayerTurn(true);\n  //   } else {\n  //     (async () => {\n  //       // player draws cards\n  //       const {\n  //         data: { cards },\n  //       } = await drawAppropriateNumOfCards(playersCards);\n\n  //       // add cards to object state\n  //       setComputersCards(cards);\n  //     })();\n  //   }\n  // }, [computersCards, deckId, playerTurn, playersCards]);\n\n  useEffect(() => {\n    (async () => {\n      // create a deck\n      const {\n        data: { deck_id },\n      } = await fetchNewDeck();\n\n      // save the deck_id to state\n      setDeckId(deck_id);\n\n      // draw cards\n      drawCard();\n    })();\n  }, [drawCard]);\n\n  useEffect(() => {\n    console.log(\"playersCards\", playersCards);\n    console.log(\"computersCards\", computersCards);\n  }, [computersCards, playersCards]);\n\n  return <div className=\"\">Hello</div>;\n}\n\nexport default GameArena;\n"],"mappings":";;AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,YAAY,EAAEC,SAAS,QAAQ,oBAAoB;AAAC;AAc7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,SAAS,GAAG;EAAA;EACnB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAgB,IAAI,CAAC;EACzD,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAU,EAAE,CAAC;EAC7D,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAU,EAAE,CAAC;EAEjE,MAAMgB,QAAQ,GAAGd,WAAW,CAAC,MAAM;IACjC,IAAI,CAACM,MAAM,EAAE;;IAEb;IACA,IAAIM,cAAc,CAACG,MAAM,KAAK,CAAC,IAAI,CAACX,UAAU,EAAE;MAC9C,CAAC,YAAY;QACX;QACA,MAAM;UACJY,IAAI,EAAE;YAAEC;UAAM;QAChB,CAAC,GAAG,MAAMf,SAAS,CAACI,MAAM,EAAE,CAAC,CAAC;QAE9BO,iBAAiB,CAACI,KAAK,CAAC;;QAExB;QACAZ,aAAa,CAAC,IAAI,CAAC;QACnBI,iBAAiB,CAAC,IAAI,CAAC;MACzB,CAAC,GAAG;IACN;IAEA,IAAIC,YAAY,CAACK,MAAM,KAAK,CAAC,IAAIX,UAAU,IAAII,cAAc,EAAE;MAC7D,CAAC,YAAY;QACX,MAAM;UACJQ,IAAI,EAAE;YAAEC;UAAM;QAChB,CAAC,GAAG,MAAMf,SAAS,CAACI,MAAM,EAAE,CAAC,CAAC;QAE9BK,eAAe,CAACM,KAAK,CAAC;QACtB;QACAZ,aAAa,CAAC,KAAK,CAAC;MACtB,CAAC,GAAG;IACN,CAAC,MAAM,IAAGD,UAAU,IAAII,cAAc,EAAE;MACtC;MACA,CAAC,YAAY;QACX,MAAM;UACJQ,IAAI,EAAE;YAAEC;UAAM;QAChB,CAAC,GAAG,MAAMf,SAAS,CAACI,MAAM,CAAC;QAC3BY,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClB;QACAN,eAAe,CAACS,SAAS,IAAI,CAAC,GAAGA,SAAS,EAAE,GAAGH,KAAK,CAAC,CAAC;QACtD;QACAZ,aAAa,CAAC,KAAK,CAAC;MACtB,CAAC,GAAG;IACN;EACF,CAAC,EAAE,CAACC,MAAM,EAAEM,cAAc,CAACG,MAAM,EAAEX,UAAU,EAAEM,YAAY,CAACK,MAAM,EAAEP,cAAc,CAAC,CAAC;;EAEpF;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEAT,SAAS,CAAC,MAAM;IACd,CAAC,YAAY;MACX;MACA,MAAM;QACJiB,IAAI,EAAE;UAAEK;QAAQ;MAClB,CAAC,GAAG,MAAMpB,YAAY,EAAE;;MAExB;MACAM,SAAS,CAACc,OAAO,CAAC;;MAElB;MACAP,QAAQ,EAAE;IACZ,CAAC,GAAG;EACN,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEdf,SAAS,CAAC,MAAM;IACdmB,OAAO,CAACC,GAAG,CAAC,cAAc,EAAET,YAAY,CAAC;IACzCQ,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEP,cAAc,CAAC;EAC/C,CAAC,EAAE,CAACA,cAAc,EAAEF,YAAY,CAAC,CAAC;EAElC,oBAAO;IAAK,SAAS,EAAC,EAAE;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAY;AACtC;AAAC,GAzGQP,SAAS;AAAA,KAATA,SAAS;AA2GlB,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module"}