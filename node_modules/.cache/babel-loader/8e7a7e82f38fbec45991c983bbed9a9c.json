{"ast":null,"code":"var _jsxFileName = \"/Users/simoneanthony/Desktop/personal-projects/blackjack-takehome/src/components/GameArena.tsx\",\n  _s = $RefreshSig$();\n// import axios from \"axios\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { fetchNewDeck, drawCards } from \"../API/getRequests\";\nimport MapCards from \"./MapCards\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameArena() {\n  _s();\n  const [playerTurn, setPlayerTurn] = useState(false);\n  const [deckId, setDeckId] = useState(null);\n  const [playersCards, setPlayersCards] = useState([]);\n  const [totalPlayerInfo, setTotalPlayerInfo] = useState({\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0\n  });\n  const [computersCards, setComputersCards] = useState([]);\n  const [totalComputerInfo, setTotalComputerInfo] = useState({\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0\n  });\n  const [didPlayerWin, setDidPlayerWin] = useState(null);\n  const drawCard = useCallback(() => {\n    if (deckId && playerTurn) {\n      // else it is players turn to pick a card\n      (async () => {\n        const {\n          data: {\n            cards\n          }\n        } = await drawCards(deckId);\n        // add card to playersCards\n        setPlayersCards(prevState => [...prevState, ...cards]);\n        // the player is done drawing a card\n        // setPlayerTurn(false);\n      })();\n    }\n  }, [deckId, playerTurn]);\n  useEffect(() => {\n    (async () => {\n      // create a deck\n      const {\n        data: {\n          deck_id\n        }\n      } = await fetchNewDeck();\n\n      // save the deck_id to state\n      setDeckId(deck_id);\n    })();\n  }, []);\n  useEffect(() => {\n    if (!deckId) return;\n\n    // initial cards for computer and player\n    (async () => {\n      // computer draws cards\n      const {\n        data: {\n          cards: computersCards\n        }\n      } = await drawCards(deckId, 2);\n      setComputersCards(computersCards);\n\n      // player draws cards\n      const {\n        data: {\n          cards: playerCards\n        }\n      } = await drawCards(deckId, 2);\n      setPlayersCards(playerCards);\n\n      // change turns\n      setPlayerTurn(true);\n    })();\n  }, [deckId]);\n  useEffect(() => {\n    // if cards were added recalculate the total\n\n    const calcCardTotal = (totalInfoObj, arr, setStateToChange) => {\n      // start array at lastReadCardIndex\n      let currIndex = totalInfoObj.lastReadCardIndex;\n      const acePosition = [];\n      const arrFromStartingPoint = arr.slice(currIndex);\n      let currTotal = totalInfoObj.total;\n      arrFromStartingPoint.forEach(_ref => {\n        let {\n          value\n        } = _ref;\n        // if the value is a number, simply add it to currTotal\n        const NumericVal = Number(value);\n        console.log('NumericVal', NumericVal, Number.isNaN(Number(NumericVal)), value);\n        if (!Number.isNaN(Number(NumericVal))) {\n          currTotal += NumericVal;\n        } else if (value === \"ACE\") {\n          // if the value is an ace, by default is equal to 11\n          currTotal += 11;\n          acePosition.push(currIndex);\n        } else {\n          // if the value is a face card add 10\n          currTotal += 10;\n        }\n        currIndex++;\n      });\n\n      // update state for the provided obj\n\n      setStateToChange(prevState => ({\n        ...prevState,\n        total: currTotal,\n        acePositions: [...prevState.acePositions, ...acePosition],\n        lastReadCardIndex: currIndex\n      }));\n    };\n\n    // if the most current playersCards was not read, recalculate the total\n    // if (playersCards.length !== totalPlayerInfo.lastReadCardIndex) {\n    //   calcCardTotal(totalPlayerInfo, playersCards, setTotalPlayerInfo);\n    // }\n\n    // if the most current card was not read, recalculate the total\n    if (computersCards.length !== totalComputerInfo.lastReadCardIndex) {\n      calcCardTotal(totalComputerInfo, computersCards, setTotalComputerInfo);\n    }\n  }, [computersCards, playersCards, playersCards.length, totalComputerInfo, totalPlayerInfo, totalPlayerInfo.lastReadCardIndex]);\n\n  // useEffect(() => {\n  //   console.log(\"playersCards\", playersCards);\n  //   console.log(\"computersCards\", computersCards);\n  // }, [computersCards, playersCards]);\n\n  useEffect(() => {\n    console.log('totalPlayerInfo', totalPlayerInfo);\n    console.log('totalComputerInfo', totalComputerInfo);\n  }, [totalComputerInfo, totalPlayerInfo]);\n\n  // const calcTotals = (currentUser: ITotalInfo, cards: ICard[]) => {\n\n  //   // calculate the current total using the last read card index\n\n  // }\n\n  // useEffect(() => {\n  //   // if the computer or the user have a number larger than 21, check if they have aces, if so subtract the 10 from the value and add 1\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-arena\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"game-panel panel-one\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Computer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapCards, {\n        cards: computersCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Total: \", totalComputerInfo.total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"game-panel panel-two\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapCards, {\n        cards: playersCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"btn-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => drawCard(),\n          children: \"Hit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          children: \"Stand\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Total: \", totalPlayerInfo.total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n}\n\n// by default aces can be given a value of 10\n_s(GameArena, \"291iGcAu+XVGToU9OdyKupfJZKM=\");\n_c = GameArena;\nexport default GameArena;\nvar _c;\n$RefreshReg$(_c, \"GameArena\");","map":{"version":3,"names":["useState","useEffect","useCallback","fetchNewDeck","drawCards","MapCards","GameArena","playerTurn","setPlayerTurn","deckId","setDeckId","playersCards","setPlayersCards","totalPlayerInfo","setTotalPlayerInfo","total","acePositions","lastReadCardIndex","computersCards","setComputersCards","totalComputerInfo","setTotalComputerInfo","didPlayerWin","setDidPlayerWin","drawCard","data","cards","prevState","deck_id","playerCards","calcCardTotal","totalInfoObj","arr","setStateToChange","currIndex","acePosition","arrFromStartingPoint","slice","currTotal","forEach","value","NumericVal","Number","console","log","isNaN","push","length"],"sources":["/Users/simoneanthony/Desktop/personal-projects/blackjack-takehome/src/components/GameArena.tsx"],"sourcesContent":["// import axios from \"axios\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { fetchNewDeck, drawCards } from \"../API/getRequests\";\nimport MapCards from \"./MapCards\";\n\nexport interface ICard {\n  code: string;\n  image: string;\n  images: {\n    svg: string;\n    png: string;\n  };\n  value: string;\n  suit: string;\n}\n\ninterface ITotalInfo {\n  total: number;\n  acePositions: Number[];\n  lastReadCardIndex: number;\n}\n\nfunction GameArena() {\n  const [playerTurn, setPlayerTurn] = useState(false);\n  const [deckId, setDeckId] = useState<null | string>(null);\n\n  const [playersCards, setPlayersCards] = useState<ICard[]>([]);\n  const [totalPlayerInfo, setTotalPlayerInfo]  = useState<ITotalInfo>({\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0,\n  });\n\n  const [computersCards, setComputersCards] = useState<ICard[]>([]);\n  const [totalComputerInfo, setTotalComputerInfo]  = useState<ITotalInfo>({\n  total: 0,\n  acePositions: [],\n  lastReadCardIndex: 0,\n});\n\n  const [didPlayerWin, setDidPlayerWin] = useState<null | boolean>(null);\n\n  const drawCard = useCallback(() => {\n    if (deckId && playerTurn) {\n      // else it is players turn to pick a card\n      (async () => {\n        const {\n          data: { cards },\n        } = await drawCards(deckId);\n        // add card to playersCards\n        setPlayersCards((prevState) => [...prevState, ...cards]);\n        // the player is done drawing a card\n        // setPlayerTurn(false);\n      })();\n    }\n  }, [deckId, playerTurn]);\n\n  useEffect(() => {\n    (async () => {\n      // create a deck\n      const {\n        data: { deck_id },\n      } = await fetchNewDeck();\n\n      // save the deck_id to state\n      setDeckId(deck_id);\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (!deckId) return;\n\n    // initial cards for computer and player\n    (async () => {\n      // computer draws cards\n      const {\n        data: { cards: computersCards },\n      } = await drawCards(deckId, 2);\n\n      setComputersCards(computersCards);\n\n      // player draws cards\n      const {\n        data: { cards: playerCards },\n      } = await drawCards(deckId, 2);\n\n      setPlayersCards(playerCards);\n\n      // change turns\n      setPlayerTurn(true);\n    })();\n  }, [deckId]);\n\n  useEffect(() => {\n    // if cards were added recalculate the total\n\n    const calcCardTotal = (totalInfoObj: ITotalInfo, arr: ICard[], setStateToChange: React.Dispatch<React.SetStateAction<ITotalInfo>>) => {\n        // start array at lastReadCardIndex\n        let currIndex = totalInfoObj.lastReadCardIndex;\n        const acePosition: Number[] = [];\n\n        const arrFromStartingPoint = arr.slice(currIndex);\n        let currTotal = totalInfoObj.total;\n      \n        arrFromStartingPoint.forEach(({value}) => {\n          // if the value is a number, simply add it to currTotal\n          const NumericVal = Number(value);\n          console.log('NumericVal', NumericVal, Number.isNaN(Number(NumericVal)), value);\n          if (!Number.isNaN(Number(NumericVal))) {\n            currTotal += NumericVal;\n          } else if (value === \"ACE\") {\n            // if the value is an ace, by default is equal to 11\n            currTotal += 11;\n            acePosition.push(currIndex);\n          } else {\n            // if the value is a face card add 10\n            currTotal += 10;\n          }\n          currIndex++;\n        })\n\n        // update state for the provided obj\n\n        setStateToChange((prevState) => ({\n          ...prevState,\n          total: currTotal,\n          acePositions: [...prevState.acePositions, ...acePosition],\n          lastReadCardIndex: currIndex,\n        }));\n    }\n\n    \n    // if the most current playersCards was not read, recalculate the total\n    // if (playersCards.length !== totalPlayerInfo.lastReadCardIndex) {\n    //   calcCardTotal(totalPlayerInfo, playersCards, setTotalPlayerInfo);\n    // }\n\n    // if the most current card was not read, recalculate the total\n    if (computersCards.length !== totalComputerInfo.lastReadCardIndex) {\n      calcCardTotal(totalComputerInfo, computersCards, setTotalComputerInfo);\n    }\n\n\n  }, [computersCards, playersCards, playersCards.length, totalComputerInfo, totalPlayerInfo, totalPlayerInfo.lastReadCardIndex]);\n\n  // useEffect(() => {\n  //   console.log(\"playersCards\", playersCards);\n  //   console.log(\"computersCards\", computersCards);\n  // }, [computersCards, playersCards]);\n\n  useEffect(() => {\n    console.log('totalPlayerInfo', totalPlayerInfo);\n    console.log('totalComputerInfo', totalComputerInfo);\n  }, [totalComputerInfo, totalPlayerInfo]);\n\n  // const calcTotals = (currentUser: ITotalInfo, cards: ICard[]) => {\n\n  //   // calculate the current total using the last read card index\n\n  // }\n\n  // useEffect(() => {\n  //   // if the computer or the user have a number larger than 21, check if they have aces, if so subtract the 10 from the value and add 1\n  // }, []);\n\n\n\n\n  return (\n    <div className=\"game-arena\">\n      <section className=\"game-panel panel-one\">\n        <h1>Computer</h1>\n        <MapCards cards={computersCards} />\n        <div>Total: {totalComputerInfo.total}</div>\n      </section>\n      <section className=\"game-panel panel-two\">\n        <div>User</div>\n        <MapCards cards={playersCards} />\n        <section className=\"btn-container\">\n          <button type=\"button\" onClick={() => drawCard()}>\n            Hit\n          </button>\n          <button type=\"button\">Stand</button>\n        </section>\n        <div>Total: {totalPlayerInfo.total}</div>\n      </section>\n    </div>\n  );\n}\n\n// by default aces can be given a value of 10\n\nexport default GameArena;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}