{"ast":null,"code":"var _jsxFileName = \"/Users/simoneanthony/Desktop/personal-projects/blackjack-takehome/src/components/GameArena.tsx\",\n  _s = $RefreshSig$();\n// import axios from \"axios\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { fetchNewDeck, drawCards } from \"../API/getRequests\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameArena() {\n  _s();\n  const [playerTurn, setPlayerTurn] = useState(false);\n  const [deckId, setDeckId] = useState(null);\n  const [cardsInfo, setCardsInfo] = useState({\n    playerCards: {\n      cards: [],\n      total: 0\n    },\n    computerCards: {\n      cards: [],\n      total: 0\n    }\n  });\n  const drawCard = useCallback(() => {\n    if (!deckId) return;\n    // if the current player neither play has cards, draw 2 cards, else draw 1\n    const drawAppropriateNumOfCards = currPlayerCardArr => currPlayerCardArr.length === 0 ? drawCards(deckId, 2) : drawCards(deckId, 1);\n    if (!playerTurn) {\n      // computer draws cards\n      drawAppropriateNumOfCards(cardsInfo.computerCards.cards);\n      setPlayerTurn(true);\n    } else {\n      // player draws cards\n      drawAppropriateNumOfCards(cardsInfo.playerCards.cards);\n    }\n  }, [cardsInfo.computerCards.cards, cardsInfo.playerCards.cards, deckId, playerTurn]);\n  useEffect(() => {\n    (async () => {\n      // create a deck\n      const {\n        data: {\n          deck_id\n        }\n      } = await fetchNewDeck();\n\n      // save the deck_id to state\n      setDeckId(deck_id);\n\n      // draw cards\n      drawCard();\n    })();\n  }, [drawCard]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: \"Hello\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 10\n  }, this);\n}\n_s(GameArena, \"PZz0Pbxb2DUm5XX4p181kukjqkc=\");\n_c = GameArena;\nexport default GameArena;\nvar _c;\n$RefreshReg$(_c, \"GameArena\");","map":{"version":3,"names":["useState","useEffect","useCallback","fetchNewDeck","drawCards","GameArena","playerTurn","setPlayerTurn","deckId","setDeckId","cardsInfo","setCardsInfo","playerCards","cards","total","computerCards","drawCard","drawAppropriateNumOfCards","currPlayerCardArr","length","data","deck_id"],"sources":["/Users/simoneanthony/Desktop/personal-projects/blackjack-takehome/src/components/GameArena.tsx"],"sourcesContent":["// import axios from \"axios\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { fetchNewDeck, drawCards } from \"../API/getRequests\";\n\ninterface ICard {\n  code: string;\n  image: string;\n  value: number;\n  suit: string;\n}\n\ninterface ICardsInfo {\n  playerCards: {\n    cards: ICard[];\n    total: number;\n  };\n  computerCards: {\n    cards: ICard[];\n    total: number;\n  };\n}\n\nfunction GameArena() {\n  const [playerTurn, setPlayerTurn] = useState(false);\n  const [deckId, setDeckId] = useState<null | string>(null);\n  const [cardsInfo, setCardsInfo] = useState<ICardsInfo>({\n    playerCards: {\n      cards: [],\n      total: 0,\n    },\n    computerCards: {\n      cards: [],\n      total: 0,\n    },\n  });\n\n  const drawCard = useCallback(() => {\n    if (!deckId) return;\n    // if the current player neither play has cards, draw 2 cards, else draw 1\n    const drawAppropriateNumOfCards = (currPlayerCardArr: ICard[]) =>\n      currPlayerCardArr.length === 0\n        ? drawCards(deckId, 2)\n        : drawCards(deckId, 1);\n\n    if (!playerTurn) {\n      // computer draws cards\n      drawAppropriateNumOfCards(cardsInfo.computerCards.cards);\n      setPlayerTurn(true);\n    } else {\n      // player draws cards\n      drawAppropriateNumOfCards(cardsInfo.playerCards.cards);\n    }\n  }, [\n    cardsInfo.computerCards.cards,\n    cardsInfo.playerCards.cards,\n    deckId,\n    playerTurn,\n  ]);\n\n  useEffect(() => {\n    (async () => {\n      // create a deck\n      const {\n        data: { deck_id },\n      } = await fetchNewDeck();\n\n      // save the deck_id to state\n      setDeckId(deck_id);\n\n      // draw cards\n      drawCard();\n    })();\n  }, [drawCard]);\n\n  return <div className=\"\">Hello</div>;\n}\n\nexport default GameArena;\n"],"mappings":";;AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,YAAY,EAAEC,SAAS,QAAQ,oBAAoB;AAAC;AAoB7D,SAASC,SAAS,GAAG;EAAA;EACnB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAgB,IAAI,CAAC;EACzD,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAa;IACrDY,WAAW,EAAE;MACXC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE;IACT,CAAC;IACDC,aAAa,EAAE;MACbF,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE;IACT;EACF,CAAC,CAAC;EAEF,MAAME,QAAQ,GAAGd,WAAW,CAAC,MAAM;IACjC,IAAI,CAACM,MAAM,EAAE;IACb;IACA,MAAMS,yBAAyB,GAAIC,iBAA0B,IAC3DA,iBAAiB,CAACC,MAAM,KAAK,CAAC,GAC1Bf,SAAS,CAACI,MAAM,EAAE,CAAC,CAAC,GACpBJ,SAAS,CAACI,MAAM,EAAE,CAAC,CAAC;IAE1B,IAAI,CAACF,UAAU,EAAE;MACf;MACAW,yBAAyB,CAACP,SAAS,CAACK,aAAa,CAACF,KAAK,CAAC;MACxDN,aAAa,CAAC,IAAI,CAAC;IACrB,CAAC,MAAM;MACL;MACAU,yBAAyB,CAACP,SAAS,CAACE,WAAW,CAACC,KAAK,CAAC;IACxD;EACF,CAAC,EAAE,CACDH,SAAS,CAACK,aAAa,CAACF,KAAK,EAC7BH,SAAS,CAACE,WAAW,CAACC,KAAK,EAC3BL,MAAM,EACNF,UAAU,CACX,CAAC;EAEFL,SAAS,CAAC,MAAM;IACd,CAAC,YAAY;MACX;MACA,MAAM;QACJmB,IAAI,EAAE;UAAEC;QAAQ;MAClB,CAAC,GAAG,MAAMlB,YAAY,EAAE;;MAExB;MACAM,SAAS,CAACY,OAAO,CAAC;;MAElB;MACAL,QAAQ,EAAE;IACZ,CAAC,GAAG;EACN,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,oBAAO;IAAK,SAAS,EAAC,EAAE;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAY;AACtC;AAAC,GArDQX,SAAS;AAAA,KAATA,SAAS;AAuDlB,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module"}