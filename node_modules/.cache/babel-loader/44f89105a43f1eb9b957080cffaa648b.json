{"ast":null,"code":"var _jsxFileName = \"/Users/simoneanthony/Desktop/personal-projects/blackjack-takehome/src/components/GameArena.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useRef } from \"react\";\nimport { fetchNewDeck, drawCards } from \"../API/getRequests\";\nimport MapCards from \"./MapCards\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameArena() {\n  _s();\n  const isMountedRef = useRef(false);\n  const [playerTurn, setPlayerTurn] = useState(false);\n  const [deckId, setDeckId] = useState(null);\n  const [playersCards, setPlayersCards] = useState([]);\n  const [totalPlayerInfo, setTotalPlayerInfo] = useState({\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0\n  });\n  const [computersCards, setComputersCards] = useState([]);\n  const [totalComputerInfo, setTotalComputerInfo] = useState({\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0\n  });\n  const [didPlayerWin, setDidPlayerWin] = useState(null);\n  const [didPlayerStand, setDidPlayerStand] = useState(false);\n\n  // on init create deck and set deck id\n  useEffect(() => {\n    if (isMountedRef.current) return;\n\n    /* \n      this has been added to prevent this hook from fetching a DeckId twice\n       because of React.StrictMode\n      */\n    isMountedRef.current = true;\n    (async () => {\n      // create a deck\n      const {\n        data: {\n          deck_id\n        }\n      } = await fetchNewDeck();\n\n      // save the deck_id to state\n      setDeckId(deck_id);\n    })();\n  }, []);\n  const drawCard = useCallback(() => {\n    if (deckId && playerTurn) {\n      // else it is players turn to pick a card\n      (async () => {\n        const {\n          data: {\n            cards\n          }\n        } = await drawCards(deckId);\n        // add card to playersCards\n        setPlayersCards(prevState => [...prevState, ...cards]);\n        // the player is done drawing a card\n      })();\n    }\n  }, [deckId, playerTurn]);\n\n  // once a deck id is present, draw 2 cards for both the computer and player\n  useEffect(() => {\n    if (!deckId) return;\n\n    // initial cards for computer and player\n    (async () => {\n      // computer draws cards\n      const {\n        data: {\n          cards: computersCards\n        }\n      } = await drawCards(deckId, 2);\n      setComputersCards(computersCards);\n\n      // player draws cards\n      const {\n        data: {\n          cards: playerCards\n        }\n      } = await drawCards(deckId, 2);\n      setPlayersCards(playerCards);\n\n      // change turns\n      setPlayerTurn(true);\n    })();\n  }, [deckId]);\n\n  /* \n  In the future, this calculation can be memoized, instead of calculating the total from the\n  beginning of the array, the position of the last element can be saved and the array can \n  iterate from that position rather than the beginning\n  */\n  const calcCardTotal = useCallback((totalInfoObj, cardsArr, setStateFunc) => {\n    let newLastReadIndex = totalInfoObj.lastReadCardIndex;\n    let newTotal = totalInfoObj.total;\n    const acePositionArr = totalInfoObj.acePositions;\n    cardsArr.slice(newLastReadIndex).forEach(_ref => {\n      let {\n        value\n      } = _ref;\n      // if the value is a number, simply add it to currTotal\n      if (value === \"QUEEN\" || value === \"KING\" || value === \"JACK\") {\n        // if the value is a face card add 10\n        newTotal += 10;\n      } else if (value === \"ACE\") {\n        // if the value is an ace, by default is equal to 11\n        newTotal += 11;\n        acePositionArr.push(newLastReadIndex);\n      } else {\n        const NumericVal = Number(value);\n        newTotal += NumericVal;\n      }\n      newLastReadIndex += 1;\n    });\n    setStateFunc({\n      total: newTotal,\n      acePositions: [...acePositionArr],\n      lastReadCardIndex: newLastReadIndex\n    });\n  }, []);\n  useEffect(() => {\n    // if playersCards were added and the most recent card was not calculated recalculate the total\n    if (playersCards.length > 0 && totalPlayerInfo.lastReadCardIndex !== playersCards.length) {\n      calcCardTotal(totalPlayerInfo, playersCards, setTotalPlayerInfo);\n    }\n  }, [calcCardTotal, playersCards, totalPlayerInfo]);\n  useEffect(() => {\n    // if computersCards were added and the most recent card was not calculated recalculate the total\n    if (computersCards.length > 0 && totalComputerInfo.lastReadCardIndex !== computersCards.length) {\n      calcCardTotal(totalComputerInfo, computersCards, setTotalComputerInfo);\n    }\n  }, [calcCardTotal, computersCards, totalComputerInfo]);\n\n  // check if a winner is present\n  useEffect(() => {\n    // if the player and the computer both get 21, the player loses\n    if (totalPlayerInfo.total === 21 && totalComputerInfo.total === 21) {\n      setDidPlayerWin(false);\n    } else if (totalPlayerInfo.total === 21) {\n      // if the player has a total of 21, the game is over and they win\n      setDidPlayerWin(true);\n    } else if (totalComputerInfo.total === 21) {\n      // if the computer has a total of 21, the game is over and it wins\n      setDidPlayerWin(false);\n    } else if (totalPlayerInfo.total > 21) {\n      // if the user has a score of over 21, check to see if they have aces\n      if (totalPlayerInfo.acePositions.length > 0) {\n        // if there are aces, subtract 11 points from the user and add 1, pop an ace from the acePositions\n        setTotalPlayerInfo(prevState => ({\n          ...prevState,\n          total: prevState.total - 11 + 1,\n          acePositions: prevState.acePositions.slice(0, -1)\n        }));\n      } else {\n        // if not the user automatically loses\n        setDidPlayerWin(false);\n      }\n    } else if (totalComputerInfo.total > 21) {\n      // if the Computer has a score of over 21 (2 aces), check to see if they have aces\n      if (totalComputerInfo.acePositions.length > 0) {\n        // if there are aces, subtract 11 points from the user and add 1, pop an ace from the acePositions\n        setTotalComputerInfo(prevState => ({\n          ...prevState,\n          total: prevState.total - 11 + 1,\n          acePositions: prevState.acePositions.slice(0, -1)\n        }));\n      } else {\n        // if not the computer automatically loses\n        setDidPlayerWin(true);\n      }\n    } else if (didPlayerStand) {\n      // if the player did stand and there is a tie OR the users cards total less than the computers cards, the computer wins\n      if (totalPlayerInfo.total === totalComputerInfo.total || totalPlayerInfo.total < totalComputerInfo.total) {\n        setDidPlayerWin(false);\n      }\n\n      // if the player has more points than the computer, the pplayer wins\n      if (totalPlayerInfo.total > totalComputerInfo.total) {\n        setDidPlayerWin(true);\n      } else {\n        // if the player and computer tie or the player has few points than the computer, the player loses\n        setDidPlayerWin(false);\n      }\n    }\n  }, [didPlayerStand, totalComputerInfo.acePositions.length, totalComputerInfo.total, totalPlayerInfo.acePositions.length, totalPlayerInfo.total]);\n  const winLoseText = () => {\n    if (didPlayerWin === null) return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: didPlayerWin ? \"You Won\" : \"You Lose\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 12\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [winLoseText(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-arena\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"game-panel panel-one\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Computer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MapCards, {\n          cards: computersCards\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Total: \", totalComputerInfo.total]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"game-panel panel-two\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MapCards, {\n          cards: playersCards\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Total: \", totalPlayerInfo.total]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this), winLoseText(), /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"btn-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => drawCard(),\n            disabled: didPlayerStand || didPlayerWin !== null,\n            children: \"Hit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => setDidPlayerStand(true),\n            children: \"Stand\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => {\n              window.location.href = \"/\";\n            },\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n// by default aces can be given a value of 10\n_s(GameArena, \"ximGHekTC7gWaFiJhrLJlnD0rB0=\");\n_c = GameArena;\nexport default GameArena;\nvar _c;\n$RefreshReg$(_c, \"GameArena\");","map":{"version":3,"names":["useState","useEffect","useCallback","useRef","fetchNewDeck","drawCards","MapCards","GameArena","isMountedRef","playerTurn","setPlayerTurn","deckId","setDeckId","playersCards","setPlayersCards","totalPlayerInfo","setTotalPlayerInfo","total","acePositions","lastReadCardIndex","computersCards","setComputersCards","totalComputerInfo","setTotalComputerInfo","didPlayerWin","setDidPlayerWin","didPlayerStand","setDidPlayerStand","current","data","deck_id","drawCard","cards","prevState","playerCards","calcCardTotal","totalInfoObj","cardsArr","setStateFunc","newLastReadIndex","newTotal","acePositionArr","slice","forEach","value","push","NumericVal","Number","length","winLoseText","window","location","href"],"sources":["/Users/simoneanthony/Desktop/personal-projects/blackjack-takehome/src/components/GameArena.tsx"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from \"react\";\nimport { fetchNewDeck, drawCards } from \"../API/getRequests\";\nimport MapCards from \"./MapCards\";\n\nexport interface ICard {\n  code: string;\n  image: string;\n  images: {\n    svg: string;\n    png: string;\n  };\n  value: string;\n  suit: string;\n}\n\ninterface ITotalInfo {\n  total: number;\n  acePositions: number[];\n  lastReadCardIndex: number;\n}\n\nfunction GameArena() {\n  const isMountedRef = useRef(false);\n\n  const [playerTurn, setPlayerTurn] = useState(false);\n  const [deckId, setDeckId] = useState<null | string>(null);\n\n  const [playersCards, setPlayersCards] = useState<ICard[]>([]);\n  const [totalPlayerInfo, setTotalPlayerInfo] = useState<ITotalInfo>({\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0,\n  });\n\n  const [computersCards, setComputersCards] = useState<ICard[]>([]);\n  const [totalComputerInfo, setTotalComputerInfo] = useState<ITotalInfo>({\n    total: 0,\n    acePositions: [],\n    lastReadCardIndex: 0,\n  });\n\n  const [didPlayerWin, setDidPlayerWin] = useState<null | boolean>(null);\n  const [didPlayerStand, setDidPlayerStand] = useState<boolean>(false);\n\n  // on init create deck and set deck id\n  useEffect(() => {\n    if (isMountedRef.current) return;\n\n    /* \n      this has been added to prevent this hook from fetching a DeckId twice\n       because of React.StrictMode\n      */\n    isMountedRef.current = true;\n\n    (async () => {\n      // create a deck\n      const {\n        data: { deck_id },\n      } = await fetchNewDeck();\n\n      // save the deck_id to state\n      setDeckId(deck_id);\n    })();\n  }, []);\n\n  const drawCard = useCallback(() => {\n    if (deckId && playerTurn) {\n      // else it is players turn to pick a card\n      (async () => {\n        const {\n          data: { cards },\n        } = await drawCards(deckId);\n        // add card to playersCards\n        setPlayersCards((prevState) => [...prevState, ...cards]);\n        // the player is done drawing a card\n      })();\n    }\n  }, [deckId, playerTurn]);\n\n  // once a deck id is present, draw 2 cards for both the computer and player\n  useEffect(() => {\n    if (!deckId) return;\n\n    // initial cards for computer and player\n    (async () => {\n      // computer draws cards\n      const {\n        data: { cards: computersCards },\n      } = await drawCards(deckId, 2);\n\n      setComputersCards(computersCards);\n\n      // player draws cards\n      const {\n        data: { cards: playerCards },\n      } = await drawCards(deckId, 2);\n\n      setPlayersCards(playerCards);\n\n      // change turns\n      setPlayerTurn(true);\n    })();\n  }, [deckId]);\n\n  /* \n  In the future, this calculation can be memoized, instead of calculating the total from the\n  beginning of the array, the position of the last element can be saved and the array can \n  iterate from that position rather than the beginning\n  */\n  const calcCardTotal = useCallback(\n    (\n      totalInfoObj: ITotalInfo,\n      cardsArr: ICard[],\n      setStateFunc: React.Dispatch<React.SetStateAction<ITotalInfo>>\n    ) => {\n      let newLastReadIndex = totalInfoObj.lastReadCardIndex;\n      let newTotal = totalInfoObj.total;\n      const acePositionArr: number[] = totalInfoObj.acePositions;\n\n      cardsArr.slice(newLastReadIndex).forEach(({ value }) => {\n        // if the value is a number, simply add it to currTotal\n        if (value === \"QUEEN\" || value === \"KING\" || value === \"JACK\") {\n          // if the value is a face card add 10\n          newTotal += 10;\n        } else if (value === \"ACE\") {\n          // if the value is an ace, by default is equal to 11\n          newTotal += 11;\n          acePositionArr.push(newLastReadIndex);\n        } else {\n          const NumericVal = Number(value);\n          newTotal += NumericVal;\n        }\n        newLastReadIndex += 1;\n      });\n\n      setStateFunc({\n        total: newTotal,\n        acePositions: [...acePositionArr],\n        lastReadCardIndex: newLastReadIndex,\n      });\n    },\n    []\n  );\n\n  useEffect(() => {\n    // if playersCards were added and the most recent card was not calculated recalculate the total\n    if (\n      playersCards.length > 0 &&\n      totalPlayerInfo.lastReadCardIndex !== playersCards.length\n    ) {\n      calcCardTotal(totalPlayerInfo, playersCards, setTotalPlayerInfo);\n    }\n  }, [calcCardTotal, playersCards, totalPlayerInfo]);\n\n  useEffect(() => {\n    // if computersCards were added and the most recent card was not calculated recalculate the total\n    if (\n      computersCards.length > 0 &&\n      totalComputerInfo.lastReadCardIndex !== computersCards.length\n    ) {\n      calcCardTotal(totalComputerInfo, computersCards, setTotalComputerInfo);\n    }\n  }, [calcCardTotal, computersCards, totalComputerInfo]);\n\n  // check if a winner is present\n  useEffect(() => {\n    // if the player and the computer both get 21, the player loses\n    if (totalPlayerInfo.total === 21 && totalComputerInfo.total === 21) {\n      setDidPlayerWin(false);\n    } else if (totalPlayerInfo.total === 21) {\n      // if the player has a total of 21, the game is over and they win\n      setDidPlayerWin(true);\n    } else if (totalComputerInfo.total === 21) {\n      // if the computer has a total of 21, the game is over and it wins\n      setDidPlayerWin(false);\n    } else if (totalPlayerInfo.total > 21) {\n      // if the user has a score of over 21, check to see if they have aces\n      if (totalPlayerInfo.acePositions.length > 0) {\n        // if there are aces, subtract 11 points from the user and add 1, pop an ace from the acePositions\n        setTotalPlayerInfo((prevState) => ({\n          ...prevState,\n          total: prevState.total - 11 + 1,\n          acePositions: prevState.acePositions.slice(0, -1),\n        }));\n      } else {\n        // if not the user automatically loses\n        setDidPlayerWin(false);\n      }\n    } else if (totalComputerInfo.total > 21) {\n      // if the Computer has a score of over 21 (2 aces), check to see if they have aces\n      if (totalComputerInfo.acePositions.length > 0) {\n        // if there are aces, subtract 11 points from the user and add 1, pop an ace from the acePositions\n        setTotalComputerInfo((prevState) => ({\n          ...prevState,\n          total: prevState.total - 11 + 1,\n          acePositions: prevState.acePositions.slice(0, -1),\n        }));\n      } else {\n        // if not the computer automatically loses\n        setDidPlayerWin(true);\n      }\n    } else if (didPlayerStand) {\n      // if the player did stand and there is a tie OR the users cards total less than the computers cards, the computer wins\n      if (\n        totalPlayerInfo.total === totalComputerInfo.total ||\n        totalPlayerInfo.total < totalComputerInfo.total\n      ) {\n        setDidPlayerWin(false);\n      }\n\n      // if the player has more points than the computer, the pplayer wins\n      if (totalPlayerInfo.total > totalComputerInfo.total) {\n        setDidPlayerWin(true);\n      } else {\n        // if the player and computer tie or the player has few points than the computer, the player loses\n        setDidPlayerWin(false);\n      }\n    }\n  }, [\n    didPlayerStand,\n    totalComputerInfo.acePositions.length,\n    totalComputerInfo.total,\n    totalPlayerInfo.acePositions.length,\n    totalPlayerInfo.total,\n  ]);\n\n  const winLoseText = () => {\n    if (didPlayerWin === null) return <></>;\n    return <div>{didPlayerWin ? \"You Won\" : \"You Lose\"}</div>;\n  };\n\n  return (\n    <>\n      {winLoseText()}\n      <div className=\"game-arena\">\n        <section className=\"game-panel panel-one\">\n          <h1>Computer</h1>\n          <MapCards cards={computersCards} />\n          <div>Total: {totalComputerInfo.total}</div>\n        </section>\n        <section className=\"game-panel panel-two\">\n          <h1>User</h1>\n          <MapCards cards={playersCards} />\n          <div>Total: {totalPlayerInfo.total}</div>\n          {winLoseText()}\n          <section className=\"btn-container\">\n            <button\n              type=\"button\"\n              onClick={() => drawCard()}\n              disabled={didPlayerStand || didPlayerWin !== null}\n            >\n              Hit\n            </button>\n            <button type=\"button\" onClick={() => setDidPlayerStand(true)}>\n              Stand\n            </button>\n            {/* This is reset button can be done by resetting state but I'm out of time */}\n            <button\n              type=\"button\"\n              onClick={() => {\n                window.location.href = \"/\";\n              }}\n            >\n              Reset\n            </button>\n          </section>\n        </section>\n      </div>\n    </>\n  );\n}\n\n// by default aces can be given a value of 10\n\nexport default GameArena;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}