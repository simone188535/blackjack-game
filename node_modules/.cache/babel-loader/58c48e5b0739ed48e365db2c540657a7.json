{"ast":null,"code":"var _jsxFileName = \"/Users/simoneanthony/Desktop/personal-projects/blackjack-takehome/src/components/GameArena.tsx\",\n  _s = $RefreshSig$();\n// import axios from \"axios\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { fetchNewDeck, drawCards } from \"../API/getRequests\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameArena() {\n  _s();\n  const [playerTurn, setPlayerTurn] = useState(false);\n  const [deckId, setDeckId] = useState(null);\n  const [cardsInfo, setCardsInfo] = useState({\n    playerCards: {\n      cards: [],\n      total: 0\n    },\n    computerCards: {\n      cards: [],\n      total: 0\n    }\n  });\n  const drawCard = useCallback(() => {\n    if (!deckId) return;\n    // if the current player neither play has cards, draw 2 cards, else draw 1\n    const drawAppropriateNumOfCards = currPlayerCardArr => currPlayerCardArr.length === 0 ? drawCards(deckId, 2) : drawCards(deckId, 1);\n    if (!playerTurn) {\n      (async () => {\n        // computer draws cards\n        const {\n          data: {\n            cards\n          }\n        } = await drawAppropriateNumOfCards(cardsInfo.computerCards.cards);\n\n        // add cards to object state\n        setCardsInfo(prevState => ({\n          ...prevState,\n          computerCards: {\n            cards: [...prevState.computerCards.cards, ...cards],\n            total: prevState.computerCards.total\n          }\n        }));\n      })();\n      setPlayerTurn(true);\n    } else {\n      (async () => {\n        // player draws cards\n        const {\n          data: {\n            cards\n          }\n        } = await drawAppropriateNumOfCards(cardsInfo.playerCards.cards);\n\n        // add cards to object state\n        setCardsInfo(prevState => ({\n          ...prevState,\n          playerCards: {\n            cards: [...prevState.playerCards.cards, ...cards],\n            total: prevState.playerCards.total\n          }\n        }));\n      })();\n    }\n  }, [cardsInfo.computerCards.cards, cardsInfo.playerCards.cards, deckId, playerTurn]);\n  useEffect(() => {\n    (async () => {\n      // create a deck\n      const {\n        data: {\n          deck_id\n        }\n      } = await fetchNewDeck();\n\n      // save the deck_id to state\n      setDeckId(deck_id);\n\n      // draw cards\n      drawCard();\n    })();\n  }, [drawCard]);\n\n  // useEffect(() => {\n  //   console.log(cardsInfo);\n  // }, [cardsInfo]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: \"Hello\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 10\n  }, this);\n}\n_s(GameArena, \"PZz0Pbxb2DUm5XX4p181kukjqkc=\");\n_c = GameArena;\nexport default GameArena;\nvar _c;\n$RefreshReg$(_c, \"GameArena\");","map":{"version":3,"names":["useState","useEffect","useCallback","fetchNewDeck","drawCards","GameArena","playerTurn","setPlayerTurn","deckId","setDeckId","cardsInfo","setCardsInfo","playerCards","cards","total","computerCards","drawCard","drawAppropriateNumOfCards","currPlayerCardArr","length","data","prevState","deck_id"],"sources":["/Users/simoneanthony/Desktop/personal-projects/blackjack-takehome/src/components/GameArena.tsx"],"sourcesContent":["// import axios from \"axios\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { fetchNewDeck, drawCards } from \"../API/getRequests\";\n\ninterface ICard {\n  code: string;\n  image: string;\n  // value: number;\n  images: {\n    svg: string;\n    png: string;\n  };\n  value: string;\n  suit: string;\n}\n\ninterface ICardsInfo {\n  playerCards: {\n    cards: ICard[];\n    total: number;\n  };\n  computerCards: {\n    cards: ICard[];\n    total: number;\n  };\n}\n\nfunction GameArena() {\n  const [playerTurn, setPlayerTurn] = useState(false);\n  const [deckId, setDeckId] = useState<null | string>(null);\n  const [cardsInfo, setCardsInfo] = useState<ICardsInfo>({\n    playerCards: {\n      cards: [],\n      total: 0,\n    },\n    computerCards: {\n      cards: [],\n      total: 0,\n    },\n  });\n\n  const drawCard = useCallback(() => {\n    if (!deckId) return;\n    // if the current player neither play has cards, draw 2 cards, else draw 1\n    const drawAppropriateNumOfCards = (currPlayerCardArr: ICard[]) =>\n      currPlayerCardArr.length === 0\n        ? drawCards(deckId, 2)\n        : drawCards(deckId, 1);\n\n    if (!playerTurn) {\n      (async () => {\n        // computer draws cards\n        const {\n          data: { cards },\n        } = await drawAppropriateNumOfCards(cardsInfo.computerCards.cards);\n\n        // add cards to object state\n        setCardsInfo((prevState) => ({\n          ...prevState,\n          computerCards: {\n            cards: [...prevState.computerCards.cards, ...cards],\n            total: prevState.computerCards.total,\n          },\n        }));\n      })();\n\n      setPlayerTurn(true);\n    } else {\n      (async () => {\n        // player draws cards\n        const {\n          data: { cards },\n        } = await drawAppropriateNumOfCards(cardsInfo.playerCards.cards);\n\n        // add cards to object state\n        setCardsInfo((prevState) => ({\n          ...prevState,\n          playerCards: {\n            cards: [...prevState.playerCards.cards, ...cards],\n            total: prevState.playerCards.total,\n          },\n        }));\n      })();\n    }\n  }, [cardsInfo.computerCards.cards, cardsInfo.playerCards.cards, deckId, playerTurn]);\n\n  useEffect(() => {\n    (async () => {\n      // create a deck\n      const {\n        data: { deck_id },\n      } = await fetchNewDeck();\n\n      // save the deck_id to state\n      setDeckId(deck_id);\n\n      // draw cards\n      drawCard();\n    })();\n  }, [drawCard]);\n\n  // useEffect(() => {\n  //   console.log(cardsInfo);\n  // }, [cardsInfo]);\n\n  return <div className=\"\">Hello</div>;\n}\n\nexport default GameArena;\n"],"mappings":";;AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,YAAY,EAAEC,SAAS,QAAQ,oBAAoB;AAAC;AAyB7D,SAASC,SAAS,GAAG;EAAA;EACnB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAgB,IAAI,CAAC;EACzD,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAa;IACrDY,WAAW,EAAE;MACXC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE;IACT,CAAC;IACDC,aAAa,EAAE;MACbF,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE;IACT;EACF,CAAC,CAAC;EAEF,MAAME,QAAQ,GAAGd,WAAW,CAAC,MAAM;IACjC,IAAI,CAACM,MAAM,EAAE;IACb;IACA,MAAMS,yBAAyB,GAAIC,iBAA0B,IAC3DA,iBAAiB,CAACC,MAAM,KAAK,CAAC,GAC1Bf,SAAS,CAACI,MAAM,EAAE,CAAC,CAAC,GACpBJ,SAAS,CAACI,MAAM,EAAE,CAAC,CAAC;IAE1B,IAAI,CAACF,UAAU,EAAE;MACf,CAAC,YAAY;QACX;QACA,MAAM;UACJc,IAAI,EAAE;YAAEP;UAAM;QAChB,CAAC,GAAG,MAAMI,yBAAyB,CAACP,SAAS,CAACK,aAAa,CAACF,KAAK,CAAC;;QAElE;QACAF,YAAY,CAAEU,SAAS,KAAM;UAC3B,GAAGA,SAAS;UACZN,aAAa,EAAE;YACbF,KAAK,EAAE,CAAC,GAAGQ,SAAS,CAACN,aAAa,CAACF,KAAK,EAAE,GAAGA,KAAK,CAAC;YACnDC,KAAK,EAAEO,SAAS,CAACN,aAAa,CAACD;UACjC;QACF,CAAC,CAAC,CAAC;MACL,CAAC,GAAG;MAEJP,aAAa,CAAC,IAAI,CAAC;IACrB,CAAC,MAAM;MACL,CAAC,YAAY;QACX;QACA,MAAM;UACJa,IAAI,EAAE;YAAEP;UAAM;QAChB,CAAC,GAAG,MAAMI,yBAAyB,CAACP,SAAS,CAACE,WAAW,CAACC,KAAK,CAAC;;QAEhE;QACAF,YAAY,CAAEU,SAAS,KAAM;UAC3B,GAAGA,SAAS;UACZT,WAAW,EAAE;YACXC,KAAK,EAAE,CAAC,GAAGQ,SAAS,CAACT,WAAW,CAACC,KAAK,EAAE,GAAGA,KAAK,CAAC;YACjDC,KAAK,EAAEO,SAAS,CAACT,WAAW,CAACE;UAC/B;QACF,CAAC,CAAC,CAAC;MACL,CAAC,GAAG;IACN;EACF,CAAC,EAAE,CAACJ,SAAS,CAACK,aAAa,CAACF,KAAK,EAAEH,SAAS,CAACE,WAAW,CAACC,KAAK,EAAEL,MAAM,EAAEF,UAAU,CAAC,CAAC;EAEpFL,SAAS,CAAC,MAAM;IACd,CAAC,YAAY;MACX;MACA,MAAM;QACJmB,IAAI,EAAE;UAAEE;QAAQ;MAClB,CAAC,GAAG,MAAMnB,YAAY,EAAE;;MAExB;MACAM,SAAS,CAACa,OAAO,CAAC;;MAElB;MACAN,QAAQ,EAAE;IACZ,CAAC,GAAG;EACN,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACA;EACA;;EAEA,oBAAO;IAAK,SAAS,EAAC,EAAE;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAY;AACtC;AAAC,GA/EQX,SAAS;AAAA,KAATA,SAAS;AAiFlB,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module"}